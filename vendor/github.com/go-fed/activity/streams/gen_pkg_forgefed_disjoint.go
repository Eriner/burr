// Code generated by astool. DO NOT EDIT.

package streams

import (
	typebranch "github.com/go-fed/activity/streams/impl/forgefed/type_branch"
	typecommit "github.com/go-fed/activity/streams/impl/forgefed/type_commit"
	typepush "github.com/go-fed/activity/streams/impl/forgefed/type_push"
	typerepository "github.com/go-fed/activity/streams/impl/forgefed/type_repository"
	typeticket "github.com/go-fed/activity/streams/impl/forgefed/type_ticket"
	typeticketdependency "github.com/go-fed/activity/streams/impl/forgefed/type_ticketdependency"
	vocab "github.com/go-fed/activity/streams/vocab"
)

// ForgeFedBranchIsDisjointWith returns true if Branch is disjoint with the
// other's type.
func ForgeFedBranchIsDisjointWith(other vocab.Type) bool {
	return typebranch.BranchIsDisjointWith(other)
}

// ForgeFedCommitIsDisjointWith returns true if Commit is disjoint with the
// other's type.
func ForgeFedCommitIsDisjointWith(other vocab.Type) bool {
	return typecommit.CommitIsDisjointWith(other)
}

// ForgeFedPushIsDisjointWith returns true if Push is disjoint with the other's
// type.
func ForgeFedPushIsDisjointWith(other vocab.Type) bool {
	return typepush.PushIsDisjointWith(other)
}

// ForgeFedRepositoryIsDisjointWith returns true if Repository is disjoint with
// the other's type.
func ForgeFedRepositoryIsDisjointWith(other vocab.Type) bool {
	return typerepository.RepositoryIsDisjointWith(other)
}

// ForgeFedTicketIsDisjointWith returns true if Ticket is disjoint with the
// other's type.
func ForgeFedTicketIsDisjointWith(other vocab.Type) bool {
	return typeticket.TicketIsDisjointWith(other)
}

// ForgeFedTicketDependencyIsDisjointWith returns true if TicketDependency is
// disjoint with the other's type.
func ForgeFedTicketDependencyIsDisjointWith(other vocab.Type) bool {
	return typeticketdependency.TicketDependencyIsDisjointWith(other)
}
