// Code generated by ent, DO NOT EDIT.

package status

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the status type in the database.
	Label = "status"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// EdgeActors holds the string denoting the actors edge name in mutations.
	EdgeActors = "actors"
	// EdgeReactedActors holds the string denoting the reacted_actors edge name in mutations.
	EdgeReactedActors = "reacted_actors"
	// EdgeReactions holds the string denoting the reactions edge name in mutations.
	EdgeReactions = "reactions"
	// Table holds the table name of the status in the database.
	Table = "status"
	// ActorsTable is the table that holds the actors relation/edge.
	ActorsTable = "status"
	// ActorsInverseTable is the table name for the Actor entity.
	// It exists in this package in order to avoid circular dependency with the "actor" package.
	ActorsInverseTable = "actors"
	// ActorsColumn is the table column denoting the actors relation/edge.
	ActorsColumn = "actor_statuses"
	// ReactedActorsTable is the table that holds the reacted_actors relation/edge. The primary key declared below.
	ReactedActorsTable = "reactions"
	// ReactedActorsInverseTable is the table name for the Actor entity.
	// It exists in this package in order to avoid circular dependency with the "actor" package.
	ReactedActorsInverseTable = "actors"
	// ReactionsTable is the table that holds the reactions relation/edge.
	ReactionsTable = "reactions"
	// ReactionsInverseTable is the table name for the Reaction entity.
	// It exists in this package in order to avoid circular dependency with the "reaction" package.
	ReactionsInverseTable = "reactions"
	// ReactionsColumn is the table column denoting the reactions relation/edge.
	ReactionsColumn = "status_id"
)

// Columns holds all SQL columns for status fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "status"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"actor_statuses",
}

var (
	// ReactedActorsPrimaryKey and ReactedActorsColumn2 are the table columns denoting the
	// primary key for the reacted_actors relation (M2M).
	ReactedActorsPrimaryKey = []string{"actor_id", "status_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/eriner/burr/internal/ent/runtime"
var (
	Hooks  [3]ent.Hook
	Policy ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
