// Code generated by ent, DO NOT EDIT.

package event

import (
	"time"

	"entgo.io/ent"
)

const (
	// Label holds the string label denoting the event type in the database.
	Label = "event"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDisplayName holds the string denoting the display_name field in the database.
	FieldDisplayName = "display_name"
	// EdgeAttendees holds the string denoting the attendees edge name in mutations.
	EdgeAttendees = "attendees"
	// EdgeOrganizer holds the string denoting the organizer edge name in mutations.
	EdgeOrganizer = "organizer"
	// Table holds the table name of the event in the database.
	Table = "events"
	// AttendeesTable is the table that holds the attendees relation/edge. The primary key declared below.
	AttendeesTable = "event_attendees"
	// AttendeesInverseTable is the table name for the Actor entity.
	// It exists in this package in order to avoid circular dependency with the "actor" package.
	AttendeesInverseTable = "actors"
	// OrganizerTable is the table that holds the organizer relation/edge.
	OrganizerTable = "events"
	// OrganizerInverseTable is the table name for the Actor entity.
	// It exists in this package in order to avoid circular dependency with the "actor" package.
	OrganizerInverseTable = "actors"
	// OrganizerColumn is the table column denoting the organizer relation/edge.
	OrganizerColumn = "actor_organizer_of"
)

// Columns holds all SQL columns for event fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDisplayName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "events"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"actor_organizer_of",
}

var (
	// AttendeesPrimaryKey and AttendeesColumn2 are the table columns denoting the
	// primary key for the attendees relation (M2M).
	AttendeesPrimaryKey = []string{"event_id", "actor_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/eriner/burr/internal/ent/runtime"
var (
	Hooks  [3]ent.Hook
	Policy ent.Policy
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	DisplayNameValidator func(string) error
)
