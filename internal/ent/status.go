// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/eriner/burr/internal/ent/actor"
	"github.com/eriner/burr/internal/ent/status"
)

// Status is the model entity for the Status schema.
type Status struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StatusQuery when eager-loading is set.
	Edges          StatusEdges `json:"edges"`
	actor_statuses *uint64
}

// StatusEdges holds the relations/edges for other nodes in the graph.
type StatusEdges struct {
	// Statuses belong to an Account
	Actors *Actor `json:"actors,omitempty"`
	// ReactedActors holds the value of the reacted_actors edge.
	ReactedActors []*Actor `json:"reacted_actors,omitempty"`
	// Reactions holds the value of the reactions edge.
	Reactions []*Reaction `json:"reactions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ActorsOrErr returns the Actors value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatusEdges) ActorsOrErr() (*Actor, error) {
	if e.loadedTypes[0] {
		if e.Actors == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: actor.Label}
		}
		return e.Actors, nil
	}
	return nil, &NotLoadedError{edge: "actors"}
}

// ReactedActorsOrErr returns the ReactedActors value or an error if the edge
// was not loaded in eager-loading.
func (e StatusEdges) ReactedActorsOrErr() ([]*Actor, error) {
	if e.loadedTypes[1] {
		return e.ReactedActors, nil
	}
	return nil, &NotLoadedError{edge: "reacted_actors"}
}

// ReactionsOrErr returns the Reactions value or an error if the edge
// was not loaded in eager-loading.
func (e StatusEdges) ReactionsOrErr() ([]*Reaction, error) {
	if e.loadedTypes[2] {
		return e.Reactions, nil
	}
	return nil, &NotLoadedError{edge: "reactions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Status) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case status.FieldID, status.FieldCreatedBy, status.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case status.FieldCreatedAt, status.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case status.ForeignKeys[0]: // actor_statuses
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Status", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Status fields.
func (s *Status) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case status.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = uint64(value.Int64)
		case status.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case status.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case status.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				s.CreatedBy = int(value.Int64)
			}
		case status.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				s.UpdatedBy = int(value.Int64)
			}
		case status.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field actor_statuses", value)
			} else if value.Valid {
				s.actor_statuses = new(uint64)
				*s.actor_statuses = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryActors queries the "actors" edge of the Status entity.
func (s *Status) QueryActors() *ActorQuery {
	return (&StatusClient{config: s.config}).QueryActors(s)
}

// QueryReactedActors queries the "reacted_actors" edge of the Status entity.
func (s *Status) QueryReactedActors() *ActorQuery {
	return (&StatusClient{config: s.config}).QueryReactedActors(s)
}

// QueryReactions queries the "reactions" edge of the Status entity.
func (s *Status) QueryReactions() *ReactionQuery {
	return (&StatusClient{config: s.config}).QueryReactions(s)
}

// Update returns a builder for updating this Status.
// Note that you need to call Status.Unwrap() before calling this method if this Status
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Status) Update() *StatusUpdateOne {
	return (&StatusClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Status entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Status) Unwrap() *Status {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Status is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Status) String() string {
	var builder strings.Builder
	builder.WriteString("Status(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", s.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", s.UpdatedBy))
	builder.WriteByte(')')
	return builder.String()
}

// StatusSlice is a parsable slice of Status.
type StatusSlice []*Status

func (s StatusSlice) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
