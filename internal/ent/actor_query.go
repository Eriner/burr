// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eriner/burr/internal/ent/actor"
	"github.com/eriner/burr/internal/ent/event"
	"github.com/eriner/burr/internal/ent/predicate"
	"github.com/eriner/burr/internal/ent/reaction"
	"github.com/eriner/burr/internal/ent/server"
	"github.com/eriner/burr/internal/ent/session"
	"github.com/eriner/burr/internal/ent/status"
)

// ActorQuery is the builder for querying Actor entities.
type ActorQuery struct {
	config
	limit               *int
	offset              *int
	unique              *bool
	order               []OrderFunc
	fields              []string
	predicates          []predicate.Actor
	withServer          *ServerQuery
	withEvents          *EventQuery
	withOrganizerOf     *EventQuery
	withStatuses        *StatusQuery
	withFollowers       *ActorQuery
	withFollowing       *ActorQuery
	withReactedStatuses *StatusQuery
	withModerators      *ActorQuery
	withModerating      *ActorQuery
	withMembers         *ActorQuery
	withGroups          *ActorQuery
	withSessions        *SessionQuery
	withReactions       *ReactionQuery
	withFKs             bool
	modifiers           []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ActorQuery builder.
func (aq *ActorQuery) Where(ps ...predicate.Actor) *ActorQuery {
	aq.predicates = append(aq.predicates, ps...)
	return aq
}

// Limit adds a limit step to the query.
func (aq *ActorQuery) Limit(limit int) *ActorQuery {
	aq.limit = &limit
	return aq
}

// Offset adds an offset step to the query.
func (aq *ActorQuery) Offset(offset int) *ActorQuery {
	aq.offset = &offset
	return aq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aq *ActorQuery) Unique(unique bool) *ActorQuery {
	aq.unique = &unique
	return aq
}

// Order adds an order step to the query.
func (aq *ActorQuery) Order(o ...OrderFunc) *ActorQuery {
	aq.order = append(aq.order, o...)
	return aq
}

// QueryServer chains the current query on the "server" edge.
func (aq *ActorQuery) QueryServer() *ServerQuery {
	query := &ServerQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(actor.Table, actor.FieldID, selector),
			sqlgraph.To(server.Table, server.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, actor.ServerTable, actor.ServerColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvents chains the current query on the "events" edge.
func (aq *ActorQuery) QueryEvents() *EventQuery {
	query := &EventQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(actor.Table, actor.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, actor.EventsTable, actor.EventsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrganizerOf chains the current query on the "organizer_of" edge.
func (aq *ActorQuery) QueryOrganizerOf() *EventQuery {
	query := &EventQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(actor.Table, actor.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, actor.OrganizerOfTable, actor.OrganizerOfColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryStatuses chains the current query on the "statuses" edge.
func (aq *ActorQuery) QueryStatuses() *StatusQuery {
	query := &StatusQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(actor.Table, actor.FieldID, selector),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, actor.StatusesTable, actor.StatusesColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFollowers chains the current query on the "followers" edge.
func (aq *ActorQuery) QueryFollowers() *ActorQuery {
	query := &ActorQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(actor.Table, actor.FieldID, selector),
			sqlgraph.To(actor.Table, actor.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, actor.FollowersTable, actor.FollowersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFollowing chains the current query on the "following" edge.
func (aq *ActorQuery) QueryFollowing() *ActorQuery {
	query := &ActorQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(actor.Table, actor.FieldID, selector),
			sqlgraph.To(actor.Table, actor.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, actor.FollowingTable, actor.FollowingPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReactedStatuses chains the current query on the "reacted_statuses" edge.
func (aq *ActorQuery) QueryReactedStatuses() *StatusQuery {
	query := &StatusQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(actor.Table, actor.FieldID, selector),
			sqlgraph.To(status.Table, status.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, actor.ReactedStatusesTable, actor.ReactedStatusesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryModerators chains the current query on the "moderators" edge.
func (aq *ActorQuery) QueryModerators() *ActorQuery {
	query := &ActorQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(actor.Table, actor.FieldID, selector),
			sqlgraph.To(actor.Table, actor.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, actor.ModeratorsTable, actor.ModeratorsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryModerating chains the current query on the "moderating" edge.
func (aq *ActorQuery) QueryModerating() *ActorQuery {
	query := &ActorQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(actor.Table, actor.FieldID, selector),
			sqlgraph.To(actor.Table, actor.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, actor.ModeratingTable, actor.ModeratingPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMembers chains the current query on the "members" edge.
func (aq *ActorQuery) QueryMembers() *ActorQuery {
	query := &ActorQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(actor.Table, actor.FieldID, selector),
			sqlgraph.To(actor.Table, actor.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, actor.MembersTable, actor.MembersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroups chains the current query on the "groups" edge.
func (aq *ActorQuery) QueryGroups() *ActorQuery {
	query := &ActorQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(actor.Table, actor.FieldID, selector),
			sqlgraph.To(actor.Table, actor.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, actor.GroupsTable, actor.GroupsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySessions chains the current query on the "sessions" edge.
func (aq *ActorQuery) QuerySessions() *SessionQuery {
	query := &SessionQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(actor.Table, actor.FieldID, selector),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, actor.SessionsTable, actor.SessionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReactions chains the current query on the "reactions" edge.
func (aq *ActorQuery) QueryReactions() *ReactionQuery {
	query := &ReactionQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(actor.Table, actor.FieldID, selector),
			sqlgraph.To(reaction.Table, reaction.ActorsColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, actor.ReactionsTable, actor.ReactionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Actor entity from the query.
// Returns a *NotFoundError when no Actor was found.
func (aq *ActorQuery) First(ctx context.Context) (*Actor, error) {
	nodes, err := aq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{actor.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aq *ActorQuery) FirstX(ctx context.Context) *Actor {
	node, err := aq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Actor ID from the query.
// Returns a *NotFoundError when no Actor ID was found.
func (aq *ActorQuery) FirstID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = aq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{actor.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aq *ActorQuery) FirstIDX(ctx context.Context) uint64 {
	id, err := aq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Actor entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Actor entity is found.
// Returns a *NotFoundError when no Actor entities are found.
func (aq *ActorQuery) Only(ctx context.Context) (*Actor, error) {
	nodes, err := aq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{actor.Label}
	default:
		return nil, &NotSingularError{actor.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aq *ActorQuery) OnlyX(ctx context.Context) *Actor {
	node, err := aq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Actor ID in the query.
// Returns a *NotSingularError when more than one Actor ID is found.
// Returns a *NotFoundError when no entities are found.
func (aq *ActorQuery) OnlyID(ctx context.Context) (id uint64, err error) {
	var ids []uint64
	if ids, err = aq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{actor.Label}
	default:
		err = &NotSingularError{actor.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aq *ActorQuery) OnlyIDX(ctx context.Context) uint64 {
	id, err := aq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Actors.
func (aq *ActorQuery) All(ctx context.Context) ([]*Actor, error) {
	if err := aq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return aq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (aq *ActorQuery) AllX(ctx context.Context) []*Actor {
	nodes, err := aq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Actor IDs.
func (aq *ActorQuery) IDs(ctx context.Context) ([]uint64, error) {
	var ids []uint64
	if err := aq.Select(actor.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aq *ActorQuery) IDsX(ctx context.Context) []uint64 {
	ids, err := aq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aq *ActorQuery) Count(ctx context.Context) (int, error) {
	if err := aq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return aq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (aq *ActorQuery) CountX(ctx context.Context) int {
	count, err := aq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aq *ActorQuery) Exist(ctx context.Context) (bool, error) {
	if err := aq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return aq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (aq *ActorQuery) ExistX(ctx context.Context) bool {
	exist, err := aq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ActorQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aq *ActorQuery) Clone() *ActorQuery {
	if aq == nil {
		return nil
	}
	return &ActorQuery{
		config:              aq.config,
		limit:               aq.limit,
		offset:              aq.offset,
		order:               append([]OrderFunc{}, aq.order...),
		predicates:          append([]predicate.Actor{}, aq.predicates...),
		withServer:          aq.withServer.Clone(),
		withEvents:          aq.withEvents.Clone(),
		withOrganizerOf:     aq.withOrganizerOf.Clone(),
		withStatuses:        aq.withStatuses.Clone(),
		withFollowers:       aq.withFollowers.Clone(),
		withFollowing:       aq.withFollowing.Clone(),
		withReactedStatuses: aq.withReactedStatuses.Clone(),
		withModerators:      aq.withModerators.Clone(),
		withModerating:      aq.withModerating.Clone(),
		withMembers:         aq.withMembers.Clone(),
		withGroups:          aq.withGroups.Clone(),
		withSessions:        aq.withSessions.Clone(),
		withReactions:       aq.withReactions.Clone(),
		// clone intermediate query.
		sql:    aq.sql.Clone(),
		path:   aq.path,
		unique: aq.unique,
	}
}

// WithServer tells the query-builder to eager-load the nodes that are connected to
// the "server" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ActorQuery) WithServer(opts ...func(*ServerQuery)) *ActorQuery {
	query := &ServerQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withServer = query
	return aq
}

// WithEvents tells the query-builder to eager-load the nodes that are connected to
// the "events" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ActorQuery) WithEvents(opts ...func(*EventQuery)) *ActorQuery {
	query := &EventQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withEvents = query
	return aq
}

// WithOrganizerOf tells the query-builder to eager-load the nodes that are connected to
// the "organizer_of" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ActorQuery) WithOrganizerOf(opts ...func(*EventQuery)) *ActorQuery {
	query := &EventQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withOrganizerOf = query
	return aq
}

// WithStatuses tells the query-builder to eager-load the nodes that are connected to
// the "statuses" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ActorQuery) WithStatuses(opts ...func(*StatusQuery)) *ActorQuery {
	query := &StatusQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withStatuses = query
	return aq
}

// WithFollowers tells the query-builder to eager-load the nodes that are connected to
// the "followers" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ActorQuery) WithFollowers(opts ...func(*ActorQuery)) *ActorQuery {
	query := &ActorQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withFollowers = query
	return aq
}

// WithFollowing tells the query-builder to eager-load the nodes that are connected to
// the "following" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ActorQuery) WithFollowing(opts ...func(*ActorQuery)) *ActorQuery {
	query := &ActorQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withFollowing = query
	return aq
}

// WithReactedStatuses tells the query-builder to eager-load the nodes that are connected to
// the "reacted_statuses" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ActorQuery) WithReactedStatuses(opts ...func(*StatusQuery)) *ActorQuery {
	query := &StatusQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withReactedStatuses = query
	return aq
}

// WithModerators tells the query-builder to eager-load the nodes that are connected to
// the "moderators" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ActorQuery) WithModerators(opts ...func(*ActorQuery)) *ActorQuery {
	query := &ActorQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withModerators = query
	return aq
}

// WithModerating tells the query-builder to eager-load the nodes that are connected to
// the "moderating" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ActorQuery) WithModerating(opts ...func(*ActorQuery)) *ActorQuery {
	query := &ActorQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withModerating = query
	return aq
}

// WithMembers tells the query-builder to eager-load the nodes that are connected to
// the "members" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ActorQuery) WithMembers(opts ...func(*ActorQuery)) *ActorQuery {
	query := &ActorQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withMembers = query
	return aq
}

// WithGroups tells the query-builder to eager-load the nodes that are connected to
// the "groups" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ActorQuery) WithGroups(opts ...func(*ActorQuery)) *ActorQuery {
	query := &ActorQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withGroups = query
	return aq
}

// WithSessions tells the query-builder to eager-load the nodes that are connected to
// the "sessions" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ActorQuery) WithSessions(opts ...func(*SessionQuery)) *ActorQuery {
	query := &SessionQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withSessions = query
	return aq
}

// WithReactions tells the query-builder to eager-load the nodes that are connected to
// the "reactions" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ActorQuery) WithReactions(opts ...func(*ReactionQuery)) *ActorQuery {
	query := &ReactionQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withReactions = query
	return aq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Actor.Query().
//		GroupBy(actor.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (aq *ActorQuery) GroupBy(field string, fields ...string) *ActorGroupBy {
	grbuild := &ActorGroupBy{config: aq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return aq.sqlQuery(ctx), nil
	}
	grbuild.label = actor.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Actor.Query().
//		Select(actor.FieldCreatedAt).
//		Scan(ctx, &v)
func (aq *ActorQuery) Select(fields ...string) *ActorSelect {
	aq.fields = append(aq.fields, fields...)
	selbuild := &ActorSelect{ActorQuery: aq}
	selbuild.label = actor.Label
	selbuild.flds, selbuild.scan = &aq.fields, selbuild.Scan
	return selbuild
}

func (aq *ActorQuery) prepareQuery(ctx context.Context) error {
	for _, f := range aq.fields {
		if !actor.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aq.path != nil {
		prev, err := aq.path(ctx)
		if err != nil {
			return err
		}
		aq.sql = prev
	}
	if actor.Policy == nil {
		return errors.New("ent: uninitialized actor.Policy (forgotten import ent/runtime?)")
	}
	if err := actor.Policy.EvalQuery(ctx, aq); err != nil {
		return err
	}
	return nil
}

func (aq *ActorQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Actor, error) {
	var (
		nodes       = []*Actor{}
		withFKs     = aq.withFKs
		_spec       = aq.querySpec()
		loadedTypes = [13]bool{
			aq.withServer != nil,
			aq.withEvents != nil,
			aq.withOrganizerOf != nil,
			aq.withStatuses != nil,
			aq.withFollowers != nil,
			aq.withFollowing != nil,
			aq.withReactedStatuses != nil,
			aq.withModerators != nil,
			aq.withModerating != nil,
			aq.withMembers != nil,
			aq.withGroups != nil,
			aq.withSessions != nil,
			aq.withReactions != nil,
		}
	)
	if aq.withServer != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, actor.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*Actor).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &Actor{config: aq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(aq.modifiers) > 0 {
		_spec.Modifiers = aq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, aq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := aq.withServer; query != nil {
		if err := aq.loadServer(ctx, query, nodes, nil,
			func(n *Actor, e *Server) { n.Edges.Server = e }); err != nil {
			return nil, err
		}
	}
	if query := aq.withEvents; query != nil {
		if err := aq.loadEvents(ctx, query, nodes,
			func(n *Actor) { n.Edges.Events = []*Event{} },
			func(n *Actor, e *Event) { n.Edges.Events = append(n.Edges.Events, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withOrganizerOf; query != nil {
		if err := aq.loadOrganizerOf(ctx, query, nodes,
			func(n *Actor) { n.Edges.OrganizerOf = []*Event{} },
			func(n *Actor, e *Event) { n.Edges.OrganizerOf = append(n.Edges.OrganizerOf, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withStatuses; query != nil {
		if err := aq.loadStatuses(ctx, query, nodes,
			func(n *Actor) { n.Edges.Statuses = []*Status{} },
			func(n *Actor, e *Status) { n.Edges.Statuses = append(n.Edges.Statuses, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withFollowers; query != nil {
		if err := aq.loadFollowers(ctx, query, nodes,
			func(n *Actor) { n.Edges.Followers = []*Actor{} },
			func(n *Actor, e *Actor) { n.Edges.Followers = append(n.Edges.Followers, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withFollowing; query != nil {
		if err := aq.loadFollowing(ctx, query, nodes,
			func(n *Actor) { n.Edges.Following = []*Actor{} },
			func(n *Actor, e *Actor) { n.Edges.Following = append(n.Edges.Following, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withReactedStatuses; query != nil {
		if err := aq.loadReactedStatuses(ctx, query, nodes,
			func(n *Actor) { n.Edges.ReactedStatuses = []*Status{} },
			func(n *Actor, e *Status) { n.Edges.ReactedStatuses = append(n.Edges.ReactedStatuses, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withModerators; query != nil {
		if err := aq.loadModerators(ctx, query, nodes,
			func(n *Actor) { n.Edges.Moderators = []*Actor{} },
			func(n *Actor, e *Actor) { n.Edges.Moderators = append(n.Edges.Moderators, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withModerating; query != nil {
		if err := aq.loadModerating(ctx, query, nodes,
			func(n *Actor) { n.Edges.Moderating = []*Actor{} },
			func(n *Actor, e *Actor) { n.Edges.Moderating = append(n.Edges.Moderating, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withMembers; query != nil {
		if err := aq.loadMembers(ctx, query, nodes,
			func(n *Actor) { n.Edges.Members = []*Actor{} },
			func(n *Actor, e *Actor) { n.Edges.Members = append(n.Edges.Members, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withGroups; query != nil {
		if err := aq.loadGroups(ctx, query, nodes,
			func(n *Actor) { n.Edges.Groups = []*Actor{} },
			func(n *Actor, e *Actor) { n.Edges.Groups = append(n.Edges.Groups, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withSessions; query != nil {
		if err := aq.loadSessions(ctx, query, nodes,
			func(n *Actor) { n.Edges.Sessions = []*Session{} },
			func(n *Actor, e *Session) { n.Edges.Sessions = append(n.Edges.Sessions, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withReactions; query != nil {
		if err := aq.loadReactions(ctx, query, nodes,
			func(n *Actor) { n.Edges.Reactions = []*Reaction{} },
			func(n *Actor, e *Reaction) { n.Edges.Reactions = append(n.Edges.Reactions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (aq *ActorQuery) loadServer(ctx context.Context, query *ServerQuery, nodes []*Actor, init func(*Actor), assign func(*Actor, *Server)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*Actor)
	for i := range nodes {
		if nodes[i].server_actors == nil {
			continue
		}
		fk := *nodes[i].server_actors
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(server.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "server_actors" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (aq *ActorQuery) loadEvents(ctx context.Context, query *EventQuery, nodes []*Actor, init func(*Actor), assign func(*Actor, *Event)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*Actor)
	nids := make(map[uint64]map[*Actor]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(actor.EventsTable)
		s.Join(joinT).On(s.C(event.FieldID), joinT.C(actor.EventsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(actor.EventsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(actor.EventsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := uint64(values[0].(*sql.NullInt64).Int64)
			inValue := uint64(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*Actor]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "events" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (aq *ActorQuery) loadOrganizerOf(ctx context.Context, query *EventQuery, nodes []*Actor, init func(*Actor), assign func(*Actor, *Event)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Actor)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Event(func(s *sql.Selector) {
		s.Where(sql.InValues(actor.OrganizerOfColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.actor_organizer_of
		if fk == nil {
			return fmt.Errorf(`foreign-key "actor_organizer_of" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "actor_organizer_of" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *ActorQuery) loadStatuses(ctx context.Context, query *StatusQuery, nodes []*Actor, init func(*Actor), assign func(*Actor, *Status)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Actor)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Status(func(s *sql.Selector) {
		s.Where(sql.InValues(actor.StatusesColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.actor_statuses
		if fk == nil {
			return fmt.Errorf(`foreign-key "actor_statuses" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "actor_statuses" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *ActorQuery) loadFollowers(ctx context.Context, query *ActorQuery, nodes []*Actor, init func(*Actor), assign func(*Actor, *Actor)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*Actor)
	nids := make(map[uint64]map[*Actor]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(actor.FollowersTable)
		s.Join(joinT).On(s.C(actor.FieldID), joinT.C(actor.FollowersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(actor.FollowersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(actor.FollowersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := uint64(values[0].(*sql.NullInt64).Int64)
			inValue := uint64(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*Actor]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "followers" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (aq *ActorQuery) loadFollowing(ctx context.Context, query *ActorQuery, nodes []*Actor, init func(*Actor), assign func(*Actor, *Actor)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*Actor)
	nids := make(map[uint64]map[*Actor]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(actor.FollowingTable)
		s.Join(joinT).On(s.C(actor.FieldID), joinT.C(actor.FollowingPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(actor.FollowingPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(actor.FollowingPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := uint64(values[0].(*sql.NullInt64).Int64)
			inValue := uint64(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*Actor]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "following" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (aq *ActorQuery) loadReactedStatuses(ctx context.Context, query *StatusQuery, nodes []*Actor, init func(*Actor), assign func(*Actor, *Status)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*Actor)
	nids := make(map[uint64]map[*Actor]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(actor.ReactedStatusesTable)
		s.Join(joinT).On(s.C(status.FieldID), joinT.C(actor.ReactedStatusesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(actor.ReactedStatusesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(actor.ReactedStatusesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := uint64(values[0].(*sql.NullInt64).Int64)
			inValue := uint64(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*Actor]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "reacted_statuses" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (aq *ActorQuery) loadModerators(ctx context.Context, query *ActorQuery, nodes []*Actor, init func(*Actor), assign func(*Actor, *Actor)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*Actor)
	nids := make(map[uint64]map[*Actor]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(actor.ModeratorsTable)
		s.Join(joinT).On(s.C(actor.FieldID), joinT.C(actor.ModeratorsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(actor.ModeratorsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(actor.ModeratorsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := uint64(values[0].(*sql.NullInt64).Int64)
			inValue := uint64(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*Actor]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "moderators" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (aq *ActorQuery) loadModerating(ctx context.Context, query *ActorQuery, nodes []*Actor, init func(*Actor), assign func(*Actor, *Actor)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*Actor)
	nids := make(map[uint64]map[*Actor]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(actor.ModeratingTable)
		s.Join(joinT).On(s.C(actor.FieldID), joinT.C(actor.ModeratingPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(actor.ModeratingPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(actor.ModeratingPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := uint64(values[0].(*sql.NullInt64).Int64)
			inValue := uint64(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*Actor]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "moderating" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (aq *ActorQuery) loadMembers(ctx context.Context, query *ActorQuery, nodes []*Actor, init func(*Actor), assign func(*Actor, *Actor)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*Actor)
	nids := make(map[uint64]map[*Actor]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(actor.MembersTable)
		s.Join(joinT).On(s.C(actor.FieldID), joinT.C(actor.MembersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(actor.MembersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(actor.MembersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := uint64(values[0].(*sql.NullInt64).Int64)
			inValue := uint64(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*Actor]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "members" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (aq *ActorQuery) loadGroups(ctx context.Context, query *ActorQuery, nodes []*Actor, init func(*Actor), assign func(*Actor, *Actor)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uint64]*Actor)
	nids := make(map[uint64]map[*Actor]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(actor.GroupsTable)
		s.Join(joinT).On(s.C(actor.FieldID), joinT.C(actor.GroupsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(actor.GroupsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(actor.GroupsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]interface{}, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]interface{}{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []interface{}) error {
			outValue := uint64(values[0].(*sql.NullInt64).Int64)
			inValue := uint64(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*Actor]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "groups" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (aq *ActorQuery) loadSessions(ctx context.Context, query *SessionQuery, nodes []*Actor, init func(*Actor), assign func(*Actor, *Session)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Actor)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Session(func(s *sql.Selector) {
		s.Where(sql.InValues(actor.SessionsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.actor_sessions
		if fk == nil {
			return fmt.Errorf(`foreign-key "actor_sessions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "actor_sessions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (aq *ActorQuery) loadReactions(ctx context.Context, query *ReactionQuery, nodes []*Actor, init func(*Actor), assign func(*Actor, *Reaction)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[uint64]*Actor)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.Reaction(func(s *sql.Selector) {
		s.Where(sql.InValues(actor.ReactionsColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ActorID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "actor_id" returned %v for node %v`, fk, n)
		}
		assign(node, n)
	}
	return nil
}

func (aq *ActorQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aq.querySpec()
	if len(aq.modifiers) > 0 {
		_spec.Modifiers = aq.modifiers
	}
	_spec.Node.Columns = aq.fields
	if len(aq.fields) > 0 {
		_spec.Unique = aq.unique != nil && *aq.unique
	}
	return sqlgraph.CountNodes(ctx, aq.driver, _spec)
}

func (aq *ActorQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := aq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (aq *ActorQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   actor.Table,
			Columns: actor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: actor.FieldID,
			},
		},
		From:   aq.sql,
		Unique: true,
	}
	if unique := aq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := aq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, actor.FieldID)
		for i := range fields {
			if fields[i] != actor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := aq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aq *ActorQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aq.driver.Dialect())
	t1 := builder.Table(actor.Table)
	columns := aq.fields
	if len(columns) == 0 {
		columns = actor.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aq.sql != nil {
		selector = aq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aq.unique != nil && *aq.unique {
		selector.Distinct()
	}
	for _, m := range aq.modifiers {
		m(selector)
	}
	for _, p := range aq.predicates {
		p(selector)
	}
	for _, p := range aq.order {
		p(selector)
	}
	if offset := aq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (aq *ActorQuery) ForUpdate(opts ...sql.LockOption) *ActorQuery {
	if aq.driver.Dialect() == dialect.Postgres {
		aq.Unique(false)
	}
	aq.modifiers = append(aq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return aq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (aq *ActorQuery) ForShare(opts ...sql.LockOption) *ActorQuery {
	if aq.driver.Dialect() == dialect.Postgres {
		aq.Unique(false)
	}
	aq.modifiers = append(aq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return aq
}

// ActorGroupBy is the group-by builder for Actor entities.
type ActorGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (agb *ActorGroupBy) Aggregate(fns ...AggregateFunc) *ActorGroupBy {
	agb.fns = append(agb.fns, fns...)
	return agb
}

// Scan applies the group-by query and scans the result into the given value.
func (agb *ActorGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := agb.path(ctx)
	if err != nil {
		return err
	}
	agb.sql = query
	return agb.sqlScan(ctx, v)
}

func (agb *ActorGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range agb.fields {
		if !actor.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := agb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := agb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (agb *ActorGroupBy) sqlQuery() *sql.Selector {
	selector := agb.sql.Select()
	aggregation := make([]string, 0, len(agb.fns))
	for _, fn := range agb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(agb.fields)+len(agb.fns))
		for _, f := range agb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(agb.fields...)...)
}

// ActorSelect is the builder for selecting fields of Actor entities.
type ActorSelect struct {
	*ActorQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (as *ActorSelect) Scan(ctx context.Context, v interface{}) error {
	if err := as.prepareQuery(ctx); err != nil {
		return err
	}
	as.sql = as.ActorQuery.sqlQuery(ctx)
	return as.sqlScan(ctx, v)
}

func (as *ActorSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := as.sql.Query()
	if err := as.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
