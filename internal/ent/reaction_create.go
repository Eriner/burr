// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eriner/burr/internal/ent/actor"
	"github.com/eriner/burr/internal/ent/reaction"
	"github.com/eriner/burr/internal/ent/status"
)

// ReactionCreate is the builder for creating a Reaction entity.
type ReactionCreate struct {
	config
	mutation *ReactionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rc *ReactionCreate) SetCreatedAt(t time.Time) *ReactionCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *ReactionCreate) SetNillableCreatedAt(t *time.Time) *ReactionCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *ReactionCreate) SetUpdatedAt(t time.Time) *ReactionCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *ReactionCreate) SetNillableUpdatedAt(t *time.Time) *ReactionCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetCreatedBy sets the "created_by" field.
func (rc *ReactionCreate) SetCreatedBy(i int) *ReactionCreate {
	rc.mutation.SetCreatedBy(i)
	return rc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (rc *ReactionCreate) SetNillableCreatedBy(i *int) *ReactionCreate {
	if i != nil {
		rc.SetCreatedBy(*i)
	}
	return rc
}

// SetUpdatedBy sets the "updated_by" field.
func (rc *ReactionCreate) SetUpdatedBy(i int) *ReactionCreate {
	rc.mutation.SetUpdatedBy(i)
	return rc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (rc *ReactionCreate) SetNillableUpdatedBy(i *int) *ReactionCreate {
	if i != nil {
		rc.SetUpdatedBy(*i)
	}
	return rc
}

// SetActorID sets the "actor_id" field.
func (rc *ReactionCreate) SetActorID(u uint64) *ReactionCreate {
	rc.mutation.SetActorID(u)
	return rc
}

// SetStatusID sets the "status_id" field.
func (rc *ReactionCreate) SetStatusID(u uint64) *ReactionCreate {
	rc.mutation.SetStatusID(u)
	return rc
}

// SetType sets the "type" field.
func (rc *ReactionCreate) SetType(r reaction.Type) *ReactionCreate {
	rc.mutation.SetType(r)
	return rc
}

// SetDat sets the "dat" field.
func (rc *ReactionCreate) SetDat(u uint64) *ReactionCreate {
	rc.mutation.SetDat(u)
	return rc
}

// SetActorsID sets the "actors" edge to the Actor entity by ID.
func (rc *ReactionCreate) SetActorsID(id uint64) *ReactionCreate {
	rc.mutation.SetActorsID(id)
	return rc
}

// SetActors sets the "actors" edge to the Actor entity.
func (rc *ReactionCreate) SetActors(a *Actor) *ReactionCreate {
	return rc.SetActorsID(a.ID)
}

// SetStatus sets the "status" edge to the Status entity.
func (rc *ReactionCreate) SetStatus(s *Status) *ReactionCreate {
	return rc.SetStatusID(s.ID)
}

// Mutation returns the ReactionMutation object of the builder.
func (rc *ReactionCreate) Mutation() *ReactionMutation {
	return rc.mutation
}

// Save creates the Reaction in the database.
func (rc *ReactionCreate) Save(ctx context.Context) (*Reaction, error) {
	var (
		err  error
		node *Reaction
	)
	if err := rc.defaults(); err != nil {
		return nil, err
	}
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Reaction)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ReactionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReactionCreate) SaveX(ctx context.Context) *Reaction {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReactionCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReactionCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReactionCreate) defaults() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		if reaction.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized reaction.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := reaction.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		if reaction.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized reaction.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := reaction.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReactionCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Reaction.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Reaction.updated_at"`)}
	}
	if _, ok := rc.mutation.ActorID(); !ok {
		return &ValidationError{Name: "actor_id", err: errors.New(`ent: missing required field "Reaction.actor_id"`)}
	}
	if _, ok := rc.mutation.StatusID(); !ok {
		return &ValidationError{Name: "status_id", err: errors.New(`ent: missing required field "Reaction.status_id"`)}
	}
	if _, ok := rc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Reaction.type"`)}
	}
	if v, ok := rc.mutation.GetType(); ok {
		if err := reaction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Reaction.type": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Dat(); !ok {
		return &ValidationError{Name: "dat", err: errors.New(`ent: missing required field "Reaction.dat"`)}
	}
	if _, ok := rc.mutation.ActorsID(); !ok {
		return &ValidationError{Name: "actors", err: errors.New(`ent: missing required edge "Reaction.actors"`)}
	}
	if _, ok := rc.mutation.StatusID(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required edge "Reaction.status"`)}
	}
	return nil
}

func (rc *ReactionCreate) sqlSave(ctx context.Context) (*Reaction, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (rc *ReactionCreate) createSpec() (*Reaction, *sqlgraph.CreateSpec) {
	var (
		_node = &Reaction{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: reaction.Table,
		}
	)
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reaction.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reaction.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reaction.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := rc.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reaction.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := rc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: reaction.FieldType,
		})
		_node.Type = value
	}
	if value, ok := rc.mutation.Dat(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: reaction.FieldDat,
		})
		_node.Dat = value
	}
	if nodes := rc.mutation.ActorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reaction.ActorsTable,
			Columns: []string{reaction.ActorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: actor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ActorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reaction.StatusTable,
			Columns: []string{reaction.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.StatusID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReactionCreateBulk is the builder for creating many Reaction entities in bulk.
type ReactionCreateBulk struct {
	config
	builders []*ReactionCreate
}

// Save creates the Reaction entities in the database.
func (rcb *ReactionCreateBulk) Save(ctx context.Context) ([]*Reaction, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Reaction, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReactionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReactionCreateBulk) SaveX(ctx context.Context) []*Reaction {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReactionCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReactionCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
