// Code generated by ent, DO NOT EDIT.

package actor

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/eriner/burr/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayName), v))
	})
}

// Note applies equality check predicate on the "note" field. It's identical to NoteEQ.
func Note(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNote), v))
	})
}

// Locked applies equality check predicate on the "locked" field. It's identical to LockedEQ.
func Locked(v bool) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocked), v))
	})
}

// Memorial applies equality check predicate on the "memorial" field. It's identical to MemorialEQ.
func Memorial(v bool) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemorial), v))
	})
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// Pubkey applies equality check predicate on the "pubkey" field. It's identical to PubkeyEQ.
func Pubkey(v []byte) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPubkey), v))
	})
}

// Privkey applies equality check predicate on the "privkey" field. It's identical to PrivkeyEQ.
func Privkey(v []byte) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivkey), v))
	})
}

// AvatarRemoteURL applies equality check predicate on the "avatar_remote_url" field. It's identical to AvatarRemoteURLEQ.
func AvatarRemoteURL(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatarRemoteURL), v))
	})
}

// AvatarLocalFile applies equality check predicate on the "avatar_local_file" field. It's identical to AvatarLocalFileEQ.
func AvatarLocalFile(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatarLocalFile), v))
	})
}

// AvatarUpdatedAt applies equality check predicate on the "avatar_updated_at" field. It's identical to AvatarUpdatedAtEQ.
func AvatarUpdatedAt(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatarUpdatedAt), v))
	})
}

// HeaderURL applies equality check predicate on the "header_url" field. It's identical to HeaderURLEQ.
func HeaderURL(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeaderURL), v))
	})
}

// HeaderLocalFile applies equality check predicate on the "header_local_file" field. It's identical to HeaderLocalFileEQ.
func HeaderLocalFile(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeaderLocalFile), v))
	})
}

// HeaderUpdatedAt applies equality check predicate on the "header_updated_at" field. It's identical to HeaderUpdatedAtEQ.
func HeaderUpdatedAt(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeaderUpdatedAt), v))
	})
}

// LastWebfingerAt applies equality check predicate on the "last_webfinger_at" field. It's identical to LastWebfingerAtEQ.
func LastWebfingerAt(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastWebfingerAt), v))
	})
}

// InboxURL applies equality check predicate on the "inbox_url" field. It's identical to InboxURLEQ.
func InboxURL(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInboxURL), v))
	})
}

// OutboxURL applies equality check predicate on the "outbox_url" field. It's identical to OutboxURLEQ.
func OutboxURL(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutboxURL), v))
	})
}

// SharedInboxURL applies equality check predicate on the "shared_inbox_url" field. It's identical to SharedInboxURLEQ.
func SharedInboxURL(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSharedInboxURL), v))
	})
}

// FollowersURL applies equality check predicate on the "followers_url" field. It's identical to FollowersURLEQ.
func FollowersURL(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFollowersURL), v))
	})
}

// MovedToID applies equality check predicate on the "moved_to_id" field. It's identical to MovedToIDEQ.
func MovedToID(v uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMovedToID), v))
	})
}

// FeaturedCollectionURL applies equality check predicate on the "featured_collection_url" field. It's identical to FeaturedCollectionURLEQ.
func FeaturedCollectionURL(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeaturedCollectionURL), v))
	})
}

// SilencedAt applies equality check predicate on the "silenced_at" field. It's identical to SilencedAtEQ.
func SilencedAt(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSilencedAt), v))
	})
}

// SuspendedAt applies equality check predicate on the "suspended_at" field. It's identical to SuspendedAtEQ.
func SuspendedAt(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuspendedAt), v))
	})
}

// PasswordHash applies equality check predicate on the "passwordHash" field. It's identical to PasswordHashEQ.
func PasswordHash(v []byte) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPasswordHash), v))
	})
}

// RecoveryCode applies equality check predicate on the "recovery_code" field. It's identical to RecoveryCodeEQ.
func RecoveryCode(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecoveryCode), v))
	})
}

// Role applies equality check predicate on the "role" field. It's identical to RoleEQ.
func Role(v uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRole), v))
	})
}

// Badge applies equality check predicate on the "badge" field. It's identical to BadgeEQ.
func Badge(v uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBadge), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedBy), v...))
	})
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedBy), v))
	})
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedBy), v))
	})
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreatedBy)))
	})
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreatedBy)))
	})
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedBy), v...))
	})
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedBy), v))
	})
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdatedBy)))
	})
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdatedBy)))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDisplayName), v))
	})
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDisplayName), v))
	})
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDisplayName), v...))
	})
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDisplayName), v...))
	})
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDisplayName), v))
	})
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDisplayName), v))
	})
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDisplayName), v))
	})
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDisplayName), v))
	})
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDisplayName), v))
	})
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDisplayName), v))
	})
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDisplayName), v))
	})
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDisplayName), v))
	})
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDisplayName), v))
	})
}

// NoteEQ applies the EQ predicate on the "note" field.
func NoteEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNote), v))
	})
}

// NoteNEQ applies the NEQ predicate on the "note" field.
func NoteNEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNote), v))
	})
}

// NoteIn applies the In predicate on the "note" field.
func NoteIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNote), v...))
	})
}

// NoteNotIn applies the NotIn predicate on the "note" field.
func NoteNotIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNote), v...))
	})
}

// NoteGT applies the GT predicate on the "note" field.
func NoteGT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNote), v))
	})
}

// NoteGTE applies the GTE predicate on the "note" field.
func NoteGTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNote), v))
	})
}

// NoteLT applies the LT predicate on the "note" field.
func NoteLT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNote), v))
	})
}

// NoteLTE applies the LTE predicate on the "note" field.
func NoteLTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNote), v))
	})
}

// NoteContains applies the Contains predicate on the "note" field.
func NoteContains(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNote), v))
	})
}

// NoteHasPrefix applies the HasPrefix predicate on the "note" field.
func NoteHasPrefix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNote), v))
	})
}

// NoteHasSuffix applies the HasSuffix predicate on the "note" field.
func NoteHasSuffix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNote), v))
	})
}

// NoteEqualFold applies the EqualFold predicate on the "note" field.
func NoteEqualFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNote), v))
	})
}

// NoteContainsFold applies the ContainsFold predicate on the "note" field.
func NoteContainsFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNote), v))
	})
}

// LockedEQ applies the EQ predicate on the "locked" field.
func LockedEQ(v bool) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocked), v))
	})
}

// LockedNEQ applies the NEQ predicate on the "locked" field.
func LockedNEQ(v bool) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocked), v))
	})
}

// MemorialEQ applies the EQ predicate on the "memorial" field.
func MemorialEQ(v bool) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMemorial), v))
	})
}

// MemorialNEQ applies the NEQ predicate on the "memorial" field.
func MemorialNEQ(v bool) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMemorial), v))
	})
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldURL), v))
	})
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldURL), v...))
	})
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldURL), v...))
	})
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldURL), v))
	})
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldURL), v))
	})
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldURL), v))
	})
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldURL), v))
	})
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldURL), v))
	})
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldURL), v))
	})
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldURL), v))
	})
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldURL), v))
	})
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldURL), v))
	})
}

// PubkeyEQ applies the EQ predicate on the "pubkey" field.
func PubkeyEQ(v []byte) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPubkey), v))
	})
}

// PubkeyNEQ applies the NEQ predicate on the "pubkey" field.
func PubkeyNEQ(v []byte) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPubkey), v))
	})
}

// PubkeyIn applies the In predicate on the "pubkey" field.
func PubkeyIn(vs ...[]byte) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPubkey), v...))
	})
}

// PubkeyNotIn applies the NotIn predicate on the "pubkey" field.
func PubkeyNotIn(vs ...[]byte) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPubkey), v...))
	})
}

// PubkeyGT applies the GT predicate on the "pubkey" field.
func PubkeyGT(v []byte) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPubkey), v))
	})
}

// PubkeyGTE applies the GTE predicate on the "pubkey" field.
func PubkeyGTE(v []byte) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPubkey), v))
	})
}

// PubkeyLT applies the LT predicate on the "pubkey" field.
func PubkeyLT(v []byte) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPubkey), v))
	})
}

// PubkeyLTE applies the LTE predicate on the "pubkey" field.
func PubkeyLTE(v []byte) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPubkey), v))
	})
}

// PrivkeyEQ applies the EQ predicate on the "privkey" field.
func PrivkeyEQ(v []byte) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrivkey), v))
	})
}

// PrivkeyNEQ applies the NEQ predicate on the "privkey" field.
func PrivkeyNEQ(v []byte) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrivkey), v))
	})
}

// PrivkeyIn applies the In predicate on the "privkey" field.
func PrivkeyIn(vs ...[]byte) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPrivkey), v...))
	})
}

// PrivkeyNotIn applies the NotIn predicate on the "privkey" field.
func PrivkeyNotIn(vs ...[]byte) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPrivkey), v...))
	})
}

// PrivkeyGT applies the GT predicate on the "privkey" field.
func PrivkeyGT(v []byte) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrivkey), v))
	})
}

// PrivkeyGTE applies the GTE predicate on the "privkey" field.
func PrivkeyGTE(v []byte) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrivkey), v))
	})
}

// PrivkeyLT applies the LT predicate on the "privkey" field.
func PrivkeyLT(v []byte) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrivkey), v))
	})
}

// PrivkeyLTE applies the LTE predicate on the "privkey" field.
func PrivkeyLTE(v []byte) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrivkey), v))
	})
}

// PrivkeyIsNil applies the IsNil predicate on the "privkey" field.
func PrivkeyIsNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrivkey)))
	})
}

// PrivkeyNotNil applies the NotNil predicate on the "privkey" field.
func PrivkeyNotNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrivkey)))
	})
}

// AvatarRemoteURLEQ applies the EQ predicate on the "avatar_remote_url" field.
func AvatarRemoteURLEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatarRemoteURL), v))
	})
}

// AvatarRemoteURLNEQ applies the NEQ predicate on the "avatar_remote_url" field.
func AvatarRemoteURLNEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAvatarRemoteURL), v))
	})
}

// AvatarRemoteURLIn applies the In predicate on the "avatar_remote_url" field.
func AvatarRemoteURLIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAvatarRemoteURL), v...))
	})
}

// AvatarRemoteURLNotIn applies the NotIn predicate on the "avatar_remote_url" field.
func AvatarRemoteURLNotIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAvatarRemoteURL), v...))
	})
}

// AvatarRemoteURLGT applies the GT predicate on the "avatar_remote_url" field.
func AvatarRemoteURLGT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAvatarRemoteURL), v))
	})
}

// AvatarRemoteURLGTE applies the GTE predicate on the "avatar_remote_url" field.
func AvatarRemoteURLGTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAvatarRemoteURL), v))
	})
}

// AvatarRemoteURLLT applies the LT predicate on the "avatar_remote_url" field.
func AvatarRemoteURLLT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAvatarRemoteURL), v))
	})
}

// AvatarRemoteURLLTE applies the LTE predicate on the "avatar_remote_url" field.
func AvatarRemoteURLLTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAvatarRemoteURL), v))
	})
}

// AvatarRemoteURLContains applies the Contains predicate on the "avatar_remote_url" field.
func AvatarRemoteURLContains(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAvatarRemoteURL), v))
	})
}

// AvatarRemoteURLHasPrefix applies the HasPrefix predicate on the "avatar_remote_url" field.
func AvatarRemoteURLHasPrefix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAvatarRemoteURL), v))
	})
}

// AvatarRemoteURLHasSuffix applies the HasSuffix predicate on the "avatar_remote_url" field.
func AvatarRemoteURLHasSuffix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAvatarRemoteURL), v))
	})
}

// AvatarRemoteURLIsNil applies the IsNil predicate on the "avatar_remote_url" field.
func AvatarRemoteURLIsNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAvatarRemoteURL)))
	})
}

// AvatarRemoteURLNotNil applies the NotNil predicate on the "avatar_remote_url" field.
func AvatarRemoteURLNotNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAvatarRemoteURL)))
	})
}

// AvatarRemoteURLEqualFold applies the EqualFold predicate on the "avatar_remote_url" field.
func AvatarRemoteURLEqualFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAvatarRemoteURL), v))
	})
}

// AvatarRemoteURLContainsFold applies the ContainsFold predicate on the "avatar_remote_url" field.
func AvatarRemoteURLContainsFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAvatarRemoteURL), v))
	})
}

// AvatarLocalFileEQ applies the EQ predicate on the "avatar_local_file" field.
func AvatarLocalFileEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatarLocalFile), v))
	})
}

// AvatarLocalFileNEQ applies the NEQ predicate on the "avatar_local_file" field.
func AvatarLocalFileNEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAvatarLocalFile), v))
	})
}

// AvatarLocalFileIn applies the In predicate on the "avatar_local_file" field.
func AvatarLocalFileIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAvatarLocalFile), v...))
	})
}

// AvatarLocalFileNotIn applies the NotIn predicate on the "avatar_local_file" field.
func AvatarLocalFileNotIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAvatarLocalFile), v...))
	})
}

// AvatarLocalFileGT applies the GT predicate on the "avatar_local_file" field.
func AvatarLocalFileGT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAvatarLocalFile), v))
	})
}

// AvatarLocalFileGTE applies the GTE predicate on the "avatar_local_file" field.
func AvatarLocalFileGTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAvatarLocalFile), v))
	})
}

// AvatarLocalFileLT applies the LT predicate on the "avatar_local_file" field.
func AvatarLocalFileLT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAvatarLocalFile), v))
	})
}

// AvatarLocalFileLTE applies the LTE predicate on the "avatar_local_file" field.
func AvatarLocalFileLTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAvatarLocalFile), v))
	})
}

// AvatarLocalFileContains applies the Contains predicate on the "avatar_local_file" field.
func AvatarLocalFileContains(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAvatarLocalFile), v))
	})
}

// AvatarLocalFileHasPrefix applies the HasPrefix predicate on the "avatar_local_file" field.
func AvatarLocalFileHasPrefix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAvatarLocalFile), v))
	})
}

// AvatarLocalFileHasSuffix applies the HasSuffix predicate on the "avatar_local_file" field.
func AvatarLocalFileHasSuffix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAvatarLocalFile), v))
	})
}

// AvatarLocalFileIsNil applies the IsNil predicate on the "avatar_local_file" field.
func AvatarLocalFileIsNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAvatarLocalFile)))
	})
}

// AvatarLocalFileNotNil applies the NotNil predicate on the "avatar_local_file" field.
func AvatarLocalFileNotNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAvatarLocalFile)))
	})
}

// AvatarLocalFileEqualFold applies the EqualFold predicate on the "avatar_local_file" field.
func AvatarLocalFileEqualFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAvatarLocalFile), v))
	})
}

// AvatarLocalFileContainsFold applies the ContainsFold predicate on the "avatar_local_file" field.
func AvatarLocalFileContainsFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAvatarLocalFile), v))
	})
}

// AvatarUpdatedAtEQ applies the EQ predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtEQ(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAvatarUpdatedAt), v))
	})
}

// AvatarUpdatedAtNEQ applies the NEQ predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtNEQ(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAvatarUpdatedAt), v))
	})
}

// AvatarUpdatedAtIn applies the In predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtIn(vs ...time.Time) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAvatarUpdatedAt), v...))
	})
}

// AvatarUpdatedAtNotIn applies the NotIn predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtNotIn(vs ...time.Time) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAvatarUpdatedAt), v...))
	})
}

// AvatarUpdatedAtGT applies the GT predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtGT(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAvatarUpdatedAt), v))
	})
}

// AvatarUpdatedAtGTE applies the GTE predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtGTE(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAvatarUpdatedAt), v))
	})
}

// AvatarUpdatedAtLT applies the LT predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtLT(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAvatarUpdatedAt), v))
	})
}

// AvatarUpdatedAtLTE applies the LTE predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtLTE(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAvatarUpdatedAt), v))
	})
}

// AvatarUpdatedAtIsNil applies the IsNil predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtIsNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAvatarUpdatedAt)))
	})
}

// AvatarUpdatedAtNotNil applies the NotNil predicate on the "avatar_updated_at" field.
func AvatarUpdatedAtNotNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAvatarUpdatedAt)))
	})
}

// HeaderURLEQ applies the EQ predicate on the "header_url" field.
func HeaderURLEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeaderURL), v))
	})
}

// HeaderURLNEQ applies the NEQ predicate on the "header_url" field.
func HeaderURLNEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHeaderURL), v))
	})
}

// HeaderURLIn applies the In predicate on the "header_url" field.
func HeaderURLIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHeaderURL), v...))
	})
}

// HeaderURLNotIn applies the NotIn predicate on the "header_url" field.
func HeaderURLNotIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHeaderURL), v...))
	})
}

// HeaderURLGT applies the GT predicate on the "header_url" field.
func HeaderURLGT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHeaderURL), v))
	})
}

// HeaderURLGTE applies the GTE predicate on the "header_url" field.
func HeaderURLGTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHeaderURL), v))
	})
}

// HeaderURLLT applies the LT predicate on the "header_url" field.
func HeaderURLLT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHeaderURL), v))
	})
}

// HeaderURLLTE applies the LTE predicate on the "header_url" field.
func HeaderURLLTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHeaderURL), v))
	})
}

// HeaderURLContains applies the Contains predicate on the "header_url" field.
func HeaderURLContains(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHeaderURL), v))
	})
}

// HeaderURLHasPrefix applies the HasPrefix predicate on the "header_url" field.
func HeaderURLHasPrefix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHeaderURL), v))
	})
}

// HeaderURLHasSuffix applies the HasSuffix predicate on the "header_url" field.
func HeaderURLHasSuffix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHeaderURL), v))
	})
}

// HeaderURLIsNil applies the IsNil predicate on the "header_url" field.
func HeaderURLIsNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHeaderURL)))
	})
}

// HeaderURLNotNil applies the NotNil predicate on the "header_url" field.
func HeaderURLNotNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHeaderURL)))
	})
}

// HeaderURLEqualFold applies the EqualFold predicate on the "header_url" field.
func HeaderURLEqualFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHeaderURL), v))
	})
}

// HeaderURLContainsFold applies the ContainsFold predicate on the "header_url" field.
func HeaderURLContainsFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHeaderURL), v))
	})
}

// HeaderLocalFileEQ applies the EQ predicate on the "header_local_file" field.
func HeaderLocalFileEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeaderLocalFile), v))
	})
}

// HeaderLocalFileNEQ applies the NEQ predicate on the "header_local_file" field.
func HeaderLocalFileNEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHeaderLocalFile), v))
	})
}

// HeaderLocalFileIn applies the In predicate on the "header_local_file" field.
func HeaderLocalFileIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHeaderLocalFile), v...))
	})
}

// HeaderLocalFileNotIn applies the NotIn predicate on the "header_local_file" field.
func HeaderLocalFileNotIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHeaderLocalFile), v...))
	})
}

// HeaderLocalFileGT applies the GT predicate on the "header_local_file" field.
func HeaderLocalFileGT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHeaderLocalFile), v))
	})
}

// HeaderLocalFileGTE applies the GTE predicate on the "header_local_file" field.
func HeaderLocalFileGTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHeaderLocalFile), v))
	})
}

// HeaderLocalFileLT applies the LT predicate on the "header_local_file" field.
func HeaderLocalFileLT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHeaderLocalFile), v))
	})
}

// HeaderLocalFileLTE applies the LTE predicate on the "header_local_file" field.
func HeaderLocalFileLTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHeaderLocalFile), v))
	})
}

// HeaderLocalFileContains applies the Contains predicate on the "header_local_file" field.
func HeaderLocalFileContains(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHeaderLocalFile), v))
	})
}

// HeaderLocalFileHasPrefix applies the HasPrefix predicate on the "header_local_file" field.
func HeaderLocalFileHasPrefix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHeaderLocalFile), v))
	})
}

// HeaderLocalFileHasSuffix applies the HasSuffix predicate on the "header_local_file" field.
func HeaderLocalFileHasSuffix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHeaderLocalFile), v))
	})
}

// HeaderLocalFileIsNil applies the IsNil predicate on the "header_local_file" field.
func HeaderLocalFileIsNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHeaderLocalFile)))
	})
}

// HeaderLocalFileNotNil applies the NotNil predicate on the "header_local_file" field.
func HeaderLocalFileNotNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHeaderLocalFile)))
	})
}

// HeaderLocalFileEqualFold applies the EqualFold predicate on the "header_local_file" field.
func HeaderLocalFileEqualFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHeaderLocalFile), v))
	})
}

// HeaderLocalFileContainsFold applies the ContainsFold predicate on the "header_local_file" field.
func HeaderLocalFileContainsFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHeaderLocalFile), v))
	})
}

// HeaderUpdatedAtEQ applies the EQ predicate on the "header_updated_at" field.
func HeaderUpdatedAtEQ(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHeaderUpdatedAt), v))
	})
}

// HeaderUpdatedAtNEQ applies the NEQ predicate on the "header_updated_at" field.
func HeaderUpdatedAtNEQ(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHeaderUpdatedAt), v))
	})
}

// HeaderUpdatedAtIn applies the In predicate on the "header_updated_at" field.
func HeaderUpdatedAtIn(vs ...time.Time) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHeaderUpdatedAt), v...))
	})
}

// HeaderUpdatedAtNotIn applies the NotIn predicate on the "header_updated_at" field.
func HeaderUpdatedAtNotIn(vs ...time.Time) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHeaderUpdatedAt), v...))
	})
}

// HeaderUpdatedAtGT applies the GT predicate on the "header_updated_at" field.
func HeaderUpdatedAtGT(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHeaderUpdatedAt), v))
	})
}

// HeaderUpdatedAtGTE applies the GTE predicate on the "header_updated_at" field.
func HeaderUpdatedAtGTE(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHeaderUpdatedAt), v))
	})
}

// HeaderUpdatedAtLT applies the LT predicate on the "header_updated_at" field.
func HeaderUpdatedAtLT(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHeaderUpdatedAt), v))
	})
}

// HeaderUpdatedAtLTE applies the LTE predicate on the "header_updated_at" field.
func HeaderUpdatedAtLTE(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHeaderUpdatedAt), v))
	})
}

// HeaderUpdatedAtIsNil applies the IsNil predicate on the "header_updated_at" field.
func HeaderUpdatedAtIsNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHeaderUpdatedAt)))
	})
}

// HeaderUpdatedAtNotNil applies the NotNil predicate on the "header_updated_at" field.
func HeaderUpdatedAtNotNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHeaderUpdatedAt)))
	})
}

// LastWebfingerAtEQ applies the EQ predicate on the "last_webfinger_at" field.
func LastWebfingerAtEQ(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastWebfingerAt), v))
	})
}

// LastWebfingerAtNEQ applies the NEQ predicate on the "last_webfinger_at" field.
func LastWebfingerAtNEQ(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastWebfingerAt), v))
	})
}

// LastWebfingerAtIn applies the In predicate on the "last_webfinger_at" field.
func LastWebfingerAtIn(vs ...time.Time) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLastWebfingerAt), v...))
	})
}

// LastWebfingerAtNotIn applies the NotIn predicate on the "last_webfinger_at" field.
func LastWebfingerAtNotIn(vs ...time.Time) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLastWebfingerAt), v...))
	})
}

// LastWebfingerAtGT applies the GT predicate on the "last_webfinger_at" field.
func LastWebfingerAtGT(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastWebfingerAt), v))
	})
}

// LastWebfingerAtGTE applies the GTE predicate on the "last_webfinger_at" field.
func LastWebfingerAtGTE(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastWebfingerAt), v))
	})
}

// LastWebfingerAtLT applies the LT predicate on the "last_webfinger_at" field.
func LastWebfingerAtLT(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastWebfingerAt), v))
	})
}

// LastWebfingerAtLTE applies the LTE predicate on the "last_webfinger_at" field.
func LastWebfingerAtLTE(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastWebfingerAt), v))
	})
}

// LastWebfingerAtIsNil applies the IsNil predicate on the "last_webfinger_at" field.
func LastWebfingerAtIsNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLastWebfingerAt)))
	})
}

// LastWebfingerAtNotNil applies the NotNil predicate on the "last_webfinger_at" field.
func LastWebfingerAtNotNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLastWebfingerAt)))
	})
}

// InboxURLEQ applies the EQ predicate on the "inbox_url" field.
func InboxURLEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldInboxURL), v))
	})
}

// InboxURLNEQ applies the NEQ predicate on the "inbox_url" field.
func InboxURLNEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldInboxURL), v))
	})
}

// InboxURLIn applies the In predicate on the "inbox_url" field.
func InboxURLIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldInboxURL), v...))
	})
}

// InboxURLNotIn applies the NotIn predicate on the "inbox_url" field.
func InboxURLNotIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldInboxURL), v...))
	})
}

// InboxURLGT applies the GT predicate on the "inbox_url" field.
func InboxURLGT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldInboxURL), v))
	})
}

// InboxURLGTE applies the GTE predicate on the "inbox_url" field.
func InboxURLGTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldInboxURL), v))
	})
}

// InboxURLLT applies the LT predicate on the "inbox_url" field.
func InboxURLLT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldInboxURL), v))
	})
}

// InboxURLLTE applies the LTE predicate on the "inbox_url" field.
func InboxURLLTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldInboxURL), v))
	})
}

// InboxURLContains applies the Contains predicate on the "inbox_url" field.
func InboxURLContains(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldInboxURL), v))
	})
}

// InboxURLHasPrefix applies the HasPrefix predicate on the "inbox_url" field.
func InboxURLHasPrefix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldInboxURL), v))
	})
}

// InboxURLHasSuffix applies the HasSuffix predicate on the "inbox_url" field.
func InboxURLHasSuffix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldInboxURL), v))
	})
}

// InboxURLEqualFold applies the EqualFold predicate on the "inbox_url" field.
func InboxURLEqualFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldInboxURL), v))
	})
}

// InboxURLContainsFold applies the ContainsFold predicate on the "inbox_url" field.
func InboxURLContainsFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldInboxURL), v))
	})
}

// OutboxURLEQ applies the EQ predicate on the "outbox_url" field.
func OutboxURLEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOutboxURL), v))
	})
}

// OutboxURLNEQ applies the NEQ predicate on the "outbox_url" field.
func OutboxURLNEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOutboxURL), v))
	})
}

// OutboxURLIn applies the In predicate on the "outbox_url" field.
func OutboxURLIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOutboxURL), v...))
	})
}

// OutboxURLNotIn applies the NotIn predicate on the "outbox_url" field.
func OutboxURLNotIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOutboxURL), v...))
	})
}

// OutboxURLGT applies the GT predicate on the "outbox_url" field.
func OutboxURLGT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOutboxURL), v))
	})
}

// OutboxURLGTE applies the GTE predicate on the "outbox_url" field.
func OutboxURLGTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOutboxURL), v))
	})
}

// OutboxURLLT applies the LT predicate on the "outbox_url" field.
func OutboxURLLT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOutboxURL), v))
	})
}

// OutboxURLLTE applies the LTE predicate on the "outbox_url" field.
func OutboxURLLTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOutboxURL), v))
	})
}

// OutboxURLContains applies the Contains predicate on the "outbox_url" field.
func OutboxURLContains(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOutboxURL), v))
	})
}

// OutboxURLHasPrefix applies the HasPrefix predicate on the "outbox_url" field.
func OutboxURLHasPrefix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOutboxURL), v))
	})
}

// OutboxURLHasSuffix applies the HasSuffix predicate on the "outbox_url" field.
func OutboxURLHasSuffix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOutboxURL), v))
	})
}

// OutboxURLEqualFold applies the EqualFold predicate on the "outbox_url" field.
func OutboxURLEqualFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOutboxURL), v))
	})
}

// OutboxURLContainsFold applies the ContainsFold predicate on the "outbox_url" field.
func OutboxURLContainsFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOutboxURL), v))
	})
}

// SharedInboxURLEQ applies the EQ predicate on the "shared_inbox_url" field.
func SharedInboxURLEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSharedInboxURL), v))
	})
}

// SharedInboxURLNEQ applies the NEQ predicate on the "shared_inbox_url" field.
func SharedInboxURLNEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSharedInboxURL), v))
	})
}

// SharedInboxURLIn applies the In predicate on the "shared_inbox_url" field.
func SharedInboxURLIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSharedInboxURL), v...))
	})
}

// SharedInboxURLNotIn applies the NotIn predicate on the "shared_inbox_url" field.
func SharedInboxURLNotIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSharedInboxURL), v...))
	})
}

// SharedInboxURLGT applies the GT predicate on the "shared_inbox_url" field.
func SharedInboxURLGT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSharedInboxURL), v))
	})
}

// SharedInboxURLGTE applies the GTE predicate on the "shared_inbox_url" field.
func SharedInboxURLGTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSharedInboxURL), v))
	})
}

// SharedInboxURLLT applies the LT predicate on the "shared_inbox_url" field.
func SharedInboxURLLT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSharedInboxURL), v))
	})
}

// SharedInboxURLLTE applies the LTE predicate on the "shared_inbox_url" field.
func SharedInboxURLLTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSharedInboxURL), v))
	})
}

// SharedInboxURLContains applies the Contains predicate on the "shared_inbox_url" field.
func SharedInboxURLContains(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSharedInboxURL), v))
	})
}

// SharedInboxURLHasPrefix applies the HasPrefix predicate on the "shared_inbox_url" field.
func SharedInboxURLHasPrefix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSharedInboxURL), v))
	})
}

// SharedInboxURLHasSuffix applies the HasSuffix predicate on the "shared_inbox_url" field.
func SharedInboxURLHasSuffix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSharedInboxURL), v))
	})
}

// SharedInboxURLEqualFold applies the EqualFold predicate on the "shared_inbox_url" field.
func SharedInboxURLEqualFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSharedInboxURL), v))
	})
}

// SharedInboxURLContainsFold applies the ContainsFold predicate on the "shared_inbox_url" field.
func SharedInboxURLContainsFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSharedInboxURL), v))
	})
}

// FollowersURLEQ applies the EQ predicate on the "followers_url" field.
func FollowersURLEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFollowersURL), v))
	})
}

// FollowersURLNEQ applies the NEQ predicate on the "followers_url" field.
func FollowersURLNEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFollowersURL), v))
	})
}

// FollowersURLIn applies the In predicate on the "followers_url" field.
func FollowersURLIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFollowersURL), v...))
	})
}

// FollowersURLNotIn applies the NotIn predicate on the "followers_url" field.
func FollowersURLNotIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFollowersURL), v...))
	})
}

// FollowersURLGT applies the GT predicate on the "followers_url" field.
func FollowersURLGT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFollowersURL), v))
	})
}

// FollowersURLGTE applies the GTE predicate on the "followers_url" field.
func FollowersURLGTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFollowersURL), v))
	})
}

// FollowersURLLT applies the LT predicate on the "followers_url" field.
func FollowersURLLT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFollowersURL), v))
	})
}

// FollowersURLLTE applies the LTE predicate on the "followers_url" field.
func FollowersURLLTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFollowersURL), v))
	})
}

// FollowersURLContains applies the Contains predicate on the "followers_url" field.
func FollowersURLContains(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFollowersURL), v))
	})
}

// FollowersURLHasPrefix applies the HasPrefix predicate on the "followers_url" field.
func FollowersURLHasPrefix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFollowersURL), v))
	})
}

// FollowersURLHasSuffix applies the HasSuffix predicate on the "followers_url" field.
func FollowersURLHasSuffix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFollowersURL), v))
	})
}

// FollowersURLEqualFold applies the EqualFold predicate on the "followers_url" field.
func FollowersURLEqualFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFollowersURL), v))
	})
}

// FollowersURLContainsFold applies the ContainsFold predicate on the "followers_url" field.
func FollowersURLContainsFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFollowersURL), v))
	})
}

// MovedToIDEQ applies the EQ predicate on the "moved_to_id" field.
func MovedToIDEQ(v uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMovedToID), v))
	})
}

// MovedToIDNEQ applies the NEQ predicate on the "moved_to_id" field.
func MovedToIDNEQ(v uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMovedToID), v))
	})
}

// MovedToIDIn applies the In predicate on the "moved_to_id" field.
func MovedToIDIn(vs ...uint64) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMovedToID), v...))
	})
}

// MovedToIDNotIn applies the NotIn predicate on the "moved_to_id" field.
func MovedToIDNotIn(vs ...uint64) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMovedToID), v...))
	})
}

// MovedToIDGT applies the GT predicate on the "moved_to_id" field.
func MovedToIDGT(v uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMovedToID), v))
	})
}

// MovedToIDGTE applies the GTE predicate on the "moved_to_id" field.
func MovedToIDGTE(v uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMovedToID), v))
	})
}

// MovedToIDLT applies the LT predicate on the "moved_to_id" field.
func MovedToIDLT(v uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMovedToID), v))
	})
}

// MovedToIDLTE applies the LTE predicate on the "moved_to_id" field.
func MovedToIDLTE(v uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMovedToID), v))
	})
}

// MovedToIDIsNil applies the IsNil predicate on the "moved_to_id" field.
func MovedToIDIsNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMovedToID)))
	})
}

// MovedToIDNotNil applies the NotNil predicate on the "moved_to_id" field.
func MovedToIDNotNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMovedToID)))
	})
}

// FeaturedCollectionURLEQ applies the EQ predicate on the "featured_collection_url" field.
func FeaturedCollectionURLEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFeaturedCollectionURL), v))
	})
}

// FeaturedCollectionURLNEQ applies the NEQ predicate on the "featured_collection_url" field.
func FeaturedCollectionURLNEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFeaturedCollectionURL), v))
	})
}

// FeaturedCollectionURLIn applies the In predicate on the "featured_collection_url" field.
func FeaturedCollectionURLIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFeaturedCollectionURL), v...))
	})
}

// FeaturedCollectionURLNotIn applies the NotIn predicate on the "featured_collection_url" field.
func FeaturedCollectionURLNotIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFeaturedCollectionURL), v...))
	})
}

// FeaturedCollectionURLGT applies the GT predicate on the "featured_collection_url" field.
func FeaturedCollectionURLGT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFeaturedCollectionURL), v))
	})
}

// FeaturedCollectionURLGTE applies the GTE predicate on the "featured_collection_url" field.
func FeaturedCollectionURLGTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFeaturedCollectionURL), v))
	})
}

// FeaturedCollectionURLLT applies the LT predicate on the "featured_collection_url" field.
func FeaturedCollectionURLLT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFeaturedCollectionURL), v))
	})
}

// FeaturedCollectionURLLTE applies the LTE predicate on the "featured_collection_url" field.
func FeaturedCollectionURLLTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFeaturedCollectionURL), v))
	})
}

// FeaturedCollectionURLContains applies the Contains predicate on the "featured_collection_url" field.
func FeaturedCollectionURLContains(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFeaturedCollectionURL), v))
	})
}

// FeaturedCollectionURLHasPrefix applies the HasPrefix predicate on the "featured_collection_url" field.
func FeaturedCollectionURLHasPrefix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFeaturedCollectionURL), v))
	})
}

// FeaturedCollectionURLHasSuffix applies the HasSuffix predicate on the "featured_collection_url" field.
func FeaturedCollectionURLHasSuffix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFeaturedCollectionURL), v))
	})
}

// FeaturedCollectionURLIsNil applies the IsNil predicate on the "featured_collection_url" field.
func FeaturedCollectionURLIsNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFeaturedCollectionURL)))
	})
}

// FeaturedCollectionURLNotNil applies the NotNil predicate on the "featured_collection_url" field.
func FeaturedCollectionURLNotNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFeaturedCollectionURL)))
	})
}

// FeaturedCollectionURLEqualFold applies the EqualFold predicate on the "featured_collection_url" field.
func FeaturedCollectionURLEqualFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFeaturedCollectionURL), v))
	})
}

// FeaturedCollectionURLContainsFold applies the ContainsFold predicate on the "featured_collection_url" field.
func FeaturedCollectionURLContainsFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFeaturedCollectionURL), v))
	})
}

// SilencedAtEQ applies the EQ predicate on the "silenced_at" field.
func SilencedAtEQ(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSilencedAt), v))
	})
}

// SilencedAtNEQ applies the NEQ predicate on the "silenced_at" field.
func SilencedAtNEQ(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSilencedAt), v))
	})
}

// SilencedAtIn applies the In predicate on the "silenced_at" field.
func SilencedAtIn(vs ...time.Time) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSilencedAt), v...))
	})
}

// SilencedAtNotIn applies the NotIn predicate on the "silenced_at" field.
func SilencedAtNotIn(vs ...time.Time) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSilencedAt), v...))
	})
}

// SilencedAtGT applies the GT predicate on the "silenced_at" field.
func SilencedAtGT(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSilencedAt), v))
	})
}

// SilencedAtGTE applies the GTE predicate on the "silenced_at" field.
func SilencedAtGTE(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSilencedAt), v))
	})
}

// SilencedAtLT applies the LT predicate on the "silenced_at" field.
func SilencedAtLT(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSilencedAt), v))
	})
}

// SilencedAtLTE applies the LTE predicate on the "silenced_at" field.
func SilencedAtLTE(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSilencedAt), v))
	})
}

// SilencedAtIsNil applies the IsNil predicate on the "silenced_at" field.
func SilencedAtIsNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSilencedAt)))
	})
}

// SilencedAtNotNil applies the NotNil predicate on the "silenced_at" field.
func SilencedAtNotNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSilencedAt)))
	})
}

// SuspendedAtEQ applies the EQ predicate on the "suspended_at" field.
func SuspendedAtEQ(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSuspendedAt), v))
	})
}

// SuspendedAtNEQ applies the NEQ predicate on the "suspended_at" field.
func SuspendedAtNEQ(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSuspendedAt), v))
	})
}

// SuspendedAtIn applies the In predicate on the "suspended_at" field.
func SuspendedAtIn(vs ...time.Time) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSuspendedAt), v...))
	})
}

// SuspendedAtNotIn applies the NotIn predicate on the "suspended_at" field.
func SuspendedAtNotIn(vs ...time.Time) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSuspendedAt), v...))
	})
}

// SuspendedAtGT applies the GT predicate on the "suspended_at" field.
func SuspendedAtGT(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSuspendedAt), v))
	})
}

// SuspendedAtGTE applies the GTE predicate on the "suspended_at" field.
func SuspendedAtGTE(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSuspendedAt), v))
	})
}

// SuspendedAtLT applies the LT predicate on the "suspended_at" field.
func SuspendedAtLT(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSuspendedAt), v))
	})
}

// SuspendedAtLTE applies the LTE predicate on the "suspended_at" field.
func SuspendedAtLTE(v time.Time) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSuspendedAt), v))
	})
}

// SuspendedAtIsNil applies the IsNil predicate on the "suspended_at" field.
func SuspendedAtIsNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSuspendedAt)))
	})
}

// SuspendedAtNotNil applies the NotNil predicate on the "suspended_at" field.
func SuspendedAtNotNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSuspendedAt)))
	})
}

// PasswordHashEQ applies the EQ predicate on the "passwordHash" field.
func PasswordHashEQ(v []byte) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPasswordHash), v))
	})
}

// PasswordHashNEQ applies the NEQ predicate on the "passwordHash" field.
func PasswordHashNEQ(v []byte) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPasswordHash), v))
	})
}

// PasswordHashIn applies the In predicate on the "passwordHash" field.
func PasswordHashIn(vs ...[]byte) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPasswordHash), v...))
	})
}

// PasswordHashNotIn applies the NotIn predicate on the "passwordHash" field.
func PasswordHashNotIn(vs ...[]byte) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPasswordHash), v...))
	})
}

// PasswordHashGT applies the GT predicate on the "passwordHash" field.
func PasswordHashGT(v []byte) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPasswordHash), v))
	})
}

// PasswordHashGTE applies the GTE predicate on the "passwordHash" field.
func PasswordHashGTE(v []byte) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPasswordHash), v))
	})
}

// PasswordHashLT applies the LT predicate on the "passwordHash" field.
func PasswordHashLT(v []byte) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPasswordHash), v))
	})
}

// PasswordHashLTE applies the LTE predicate on the "passwordHash" field.
func PasswordHashLTE(v []byte) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPasswordHash), v))
	})
}

// PasswordHashIsNil applies the IsNil predicate on the "passwordHash" field.
func PasswordHashIsNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPasswordHash)))
	})
}

// PasswordHashNotNil applies the NotNil predicate on the "passwordHash" field.
func PasswordHashNotNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPasswordHash)))
	})
}

// RecoveryCodeEQ applies the EQ predicate on the "recovery_code" field.
func RecoveryCodeEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRecoveryCode), v))
	})
}

// RecoveryCodeNEQ applies the NEQ predicate on the "recovery_code" field.
func RecoveryCodeNEQ(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRecoveryCode), v))
	})
}

// RecoveryCodeIn applies the In predicate on the "recovery_code" field.
func RecoveryCodeIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRecoveryCode), v...))
	})
}

// RecoveryCodeNotIn applies the NotIn predicate on the "recovery_code" field.
func RecoveryCodeNotIn(vs ...string) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRecoveryCode), v...))
	})
}

// RecoveryCodeGT applies the GT predicate on the "recovery_code" field.
func RecoveryCodeGT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRecoveryCode), v))
	})
}

// RecoveryCodeGTE applies the GTE predicate on the "recovery_code" field.
func RecoveryCodeGTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRecoveryCode), v))
	})
}

// RecoveryCodeLT applies the LT predicate on the "recovery_code" field.
func RecoveryCodeLT(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRecoveryCode), v))
	})
}

// RecoveryCodeLTE applies the LTE predicate on the "recovery_code" field.
func RecoveryCodeLTE(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRecoveryCode), v))
	})
}

// RecoveryCodeContains applies the Contains predicate on the "recovery_code" field.
func RecoveryCodeContains(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRecoveryCode), v))
	})
}

// RecoveryCodeHasPrefix applies the HasPrefix predicate on the "recovery_code" field.
func RecoveryCodeHasPrefix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRecoveryCode), v))
	})
}

// RecoveryCodeHasSuffix applies the HasSuffix predicate on the "recovery_code" field.
func RecoveryCodeHasSuffix(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRecoveryCode), v))
	})
}

// RecoveryCodeIsNil applies the IsNil predicate on the "recovery_code" field.
func RecoveryCodeIsNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRecoveryCode)))
	})
}

// RecoveryCodeNotNil applies the NotNil predicate on the "recovery_code" field.
func RecoveryCodeNotNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRecoveryCode)))
	})
}

// RecoveryCodeEqualFold applies the EqualFold predicate on the "recovery_code" field.
func RecoveryCodeEqualFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRecoveryCode), v))
	})
}

// RecoveryCodeContainsFold applies the ContainsFold predicate on the "recovery_code" field.
func RecoveryCodeContainsFold(v string) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRecoveryCode), v))
	})
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRole), v))
	})
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRole), v))
	})
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...uint64) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRole), v...))
	})
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...uint64) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRole), v...))
	})
}

// RoleGT applies the GT predicate on the "role" field.
func RoleGT(v uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRole), v))
	})
}

// RoleGTE applies the GTE predicate on the "role" field.
func RoleGTE(v uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRole), v))
	})
}

// RoleLT applies the LT predicate on the "role" field.
func RoleLT(v uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRole), v))
	})
}

// RoleLTE applies the LTE predicate on the "role" field.
func RoleLTE(v uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRole), v))
	})
}

// RoleIsNil applies the IsNil predicate on the "role" field.
func RoleIsNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRole)))
	})
}

// RoleNotNil applies the NotNil predicate on the "role" field.
func RoleNotNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRole)))
	})
}

// BadgeEQ applies the EQ predicate on the "badge" field.
func BadgeEQ(v uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBadge), v))
	})
}

// BadgeNEQ applies the NEQ predicate on the "badge" field.
func BadgeNEQ(v uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBadge), v))
	})
}

// BadgeIn applies the In predicate on the "badge" field.
func BadgeIn(vs ...uint64) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBadge), v...))
	})
}

// BadgeNotIn applies the NotIn predicate on the "badge" field.
func BadgeNotIn(vs ...uint64) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBadge), v...))
	})
}

// BadgeGT applies the GT predicate on the "badge" field.
func BadgeGT(v uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBadge), v))
	})
}

// BadgeGTE applies the GTE predicate on the "badge" field.
func BadgeGTE(v uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBadge), v))
	})
}

// BadgeLT applies the LT predicate on the "badge" field.
func BadgeLT(v uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBadge), v))
	})
}

// BadgeLTE applies the LTE predicate on the "badge" field.
func BadgeLTE(v uint64) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBadge), v))
	})
}

// BadgeIsNil applies the IsNil predicate on the "badge" field.
func BadgeIsNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBadge)))
	})
}

// BadgeNotNil applies the NotNil predicate on the "badge" field.
func BadgeNotNil() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBadge)))
	})
}

// LocaleEQ applies the EQ predicate on the "locale" field.
func LocaleEQ(v Locale) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLocale), v))
	})
}

// LocaleNEQ applies the NEQ predicate on the "locale" field.
func LocaleNEQ(v Locale) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLocale), v))
	})
}

// LocaleIn applies the In predicate on the "locale" field.
func LocaleIn(vs ...Locale) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLocale), v...))
	})
}

// LocaleNotIn applies the NotIn predicate on the "locale" field.
func LocaleNotIn(vs ...Locale) predicate.Actor {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Actor(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLocale), v...))
	})
}

// HasServer applies the HasEdge predicate on the "server" edge.
func HasServer() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ServerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ServerTable, ServerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServerWith applies the HasEdge predicate on the "server" edge with a given conditions (other predicates).
func HasServerWith(preds ...predicate.Server) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ServerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ServerTable, ServerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEvents applies the HasEdge predicate on the "events" edge.
func HasEvents() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EventsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, EventsTable, EventsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventsWith applies the HasEdge predicate on the "events" edge with a given conditions (other predicates).
func HasEventsWith(preds ...predicate.Event) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(EventsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, EventsTable, EventsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganizerOf applies the HasEdge predicate on the "organizer_of" edge.
func HasOrganizerOf() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrganizerOfTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrganizerOfTable, OrganizerOfColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizerOfWith applies the HasEdge predicate on the "organizer_of" edge with a given conditions (other predicates).
func HasOrganizerOfWith(preds ...predicate.Event) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OrganizerOfInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, OrganizerOfTable, OrganizerOfColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasStatuses applies the HasEdge predicate on the "statuses" edge.
func HasStatuses() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StatusesTable, StatusesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStatusesWith applies the HasEdge predicate on the "statuses" edge with a given conditions (other predicates).
func HasStatusesWith(preds ...predicate.Status) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(StatusesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, StatusesTable, StatusesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFollowers applies the HasEdge predicate on the "followers" edge.
func HasFollowers() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FollowersTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, FollowersTable, FollowersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowersWith applies the HasEdge predicate on the "followers" edge with a given conditions (other predicates).
func HasFollowersWith(preds ...predicate.Actor) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, FollowersTable, FollowersPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFollowing applies the HasEdge predicate on the "following" edge.
func HasFollowing() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(FollowingTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, FollowingTable, FollowingPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFollowingWith applies the HasEdge predicate on the "following" edge with a given conditions (other predicates).
func HasFollowingWith(preds ...predicate.Actor) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, FollowingTable, FollowingPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReactedStatuses applies the HasEdge predicate on the "reacted_statuses" edge.
func HasReactedStatuses() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReactedStatusesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ReactedStatusesTable, ReactedStatusesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReactedStatusesWith applies the HasEdge predicate on the "reacted_statuses" edge with a given conditions (other predicates).
func HasReactedStatusesWith(preds ...predicate.Status) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReactedStatusesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ReactedStatusesTable, ReactedStatusesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasModerators applies the HasEdge predicate on the "moderators" edge.
func HasModerators() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ModeratorsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ModeratorsTable, ModeratorsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModeratorsWith applies the HasEdge predicate on the "moderators" edge with a given conditions (other predicates).
func HasModeratorsWith(preds ...predicate.Actor) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ModeratorsTable, ModeratorsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasModerating applies the HasEdge predicate on the "moderating" edge.
func HasModerating() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ModeratingTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ModeratingTable, ModeratingPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasModeratingWith applies the HasEdge predicate on the "moderating" edge with a given conditions (other predicates).
func HasModeratingWith(preds ...predicate.Actor) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ModeratingTable, ModeratingPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMembers applies the HasEdge predicate on the "members" edge.
func HasMembers() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(MembersTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, MembersTable, MembersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMembersWith applies the HasEdge predicate on the "members" edge with a given conditions (other predicates).
func HasMembersWith(preds ...predicate.Actor) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, MembersTable, MembersPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroups applies the HasEdge predicate on the "groups" edge.
func HasGroups() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(GroupsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, GroupsTable, GroupsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupsWith applies the HasEdge predicate on the "groups" edge with a given conditions (other predicates).
func HasGroupsWith(preds ...predicate.Actor) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, GroupsTable, GroupsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSessions applies the HasEdge predicate on the "sessions" edge.
func HasSessions() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SessionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSessionsWith applies the HasEdge predicate on the "sessions" edge with a given conditions (other predicates).
func HasSessionsWith(preds ...predicate.Session) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SessionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReactions applies the HasEdge predicate on the "reactions" edge.
func HasReactions() predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReactionsTable, ReactionsColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, ReactionsTable, ReactionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReactionsWith applies the HasEdge predicate on the "reactions" edge with a given conditions (other predicates).
func HasReactionsWith(preds ...predicate.Reaction) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReactionsInverseTable, ReactionsColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, ReactionsTable, ReactionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Actor) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Actor) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Actor) predicate.Actor {
	return predicate.Actor(func(s *sql.Selector) {
		p(s.Not())
	})
}
