// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eriner/burr/internal/ent/actor"
	"github.com/eriner/burr/internal/ent/predicate"
	"github.com/eriner/burr/internal/ent/reaction"
	"github.com/eriner/burr/internal/ent/status"
)

// ReactionUpdate is the builder for updating Reaction entities.
type ReactionUpdate struct {
	config
	hooks    []Hook
	mutation *ReactionMutation
}

// Where appends a list predicates to the ReactionUpdate builder.
func (ru *ReactionUpdate) Where(ps ...predicate.Reaction) *ReactionUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *ReactionUpdate) SetUpdatedAt(t time.Time) *ReactionUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetCreatedBy sets the "created_by" field.
func (ru *ReactionUpdate) SetCreatedBy(i int) *ReactionUpdate {
	ru.mutation.ResetCreatedBy()
	ru.mutation.SetCreatedBy(i)
	return ru
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ru *ReactionUpdate) SetNillableCreatedBy(i *int) *ReactionUpdate {
	if i != nil {
		ru.SetCreatedBy(*i)
	}
	return ru
}

// AddCreatedBy adds i to the "created_by" field.
func (ru *ReactionUpdate) AddCreatedBy(i int) *ReactionUpdate {
	ru.mutation.AddCreatedBy(i)
	return ru
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ru *ReactionUpdate) ClearCreatedBy() *ReactionUpdate {
	ru.mutation.ClearCreatedBy()
	return ru
}

// SetUpdatedBy sets the "updated_by" field.
func (ru *ReactionUpdate) SetUpdatedBy(i int) *ReactionUpdate {
	ru.mutation.ResetUpdatedBy()
	ru.mutation.SetUpdatedBy(i)
	return ru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ru *ReactionUpdate) SetNillableUpdatedBy(i *int) *ReactionUpdate {
	if i != nil {
		ru.SetUpdatedBy(*i)
	}
	return ru
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ru *ReactionUpdate) AddUpdatedBy(i int) *ReactionUpdate {
	ru.mutation.AddUpdatedBy(i)
	return ru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ru *ReactionUpdate) ClearUpdatedBy() *ReactionUpdate {
	ru.mutation.ClearUpdatedBy()
	return ru
}

// SetActorID sets the "actor_id" field.
func (ru *ReactionUpdate) SetActorID(u uint64) *ReactionUpdate {
	ru.mutation.SetActorID(u)
	return ru
}

// SetStatusID sets the "status_id" field.
func (ru *ReactionUpdate) SetStatusID(u uint64) *ReactionUpdate {
	ru.mutation.SetStatusID(u)
	return ru
}

// SetType sets the "type" field.
func (ru *ReactionUpdate) SetType(r reaction.Type) *ReactionUpdate {
	ru.mutation.SetType(r)
	return ru
}

// SetDat sets the "dat" field.
func (ru *ReactionUpdate) SetDat(u uint64) *ReactionUpdate {
	ru.mutation.ResetDat()
	ru.mutation.SetDat(u)
	return ru
}

// AddDat adds u to the "dat" field.
func (ru *ReactionUpdate) AddDat(u int64) *ReactionUpdate {
	ru.mutation.AddDat(u)
	return ru
}

// SetActorsID sets the "actors" edge to the Actor entity by ID.
func (ru *ReactionUpdate) SetActorsID(id uint64) *ReactionUpdate {
	ru.mutation.SetActorsID(id)
	return ru
}

// SetActors sets the "actors" edge to the Actor entity.
func (ru *ReactionUpdate) SetActors(a *Actor) *ReactionUpdate {
	return ru.SetActorsID(a.ID)
}

// SetStatus sets the "status" edge to the Status entity.
func (ru *ReactionUpdate) SetStatus(s *Status) *ReactionUpdate {
	return ru.SetStatusID(s.ID)
}

// Mutation returns the ReactionMutation object of the builder.
func (ru *ReactionUpdate) Mutation() *ReactionMutation {
	return ru.mutation
}

// ClearActors clears the "actors" edge to the Actor entity.
func (ru *ReactionUpdate) ClearActors() *ReactionUpdate {
	ru.mutation.ClearActors()
	return ru
}

// ClearStatus clears the "status" edge to the Status entity.
func (ru *ReactionUpdate) ClearStatus() *ReactionUpdate {
	ru.mutation.ClearStatus()
	return ru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReactionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if err := ru.defaults(); err != nil {
		return 0, err
	}
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReactionUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReactionUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReactionUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *ReactionUpdate) defaults() error {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		if reaction.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized reaction.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := reaction.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ru *ReactionUpdate) check() error {
	if v, ok := ru.mutation.GetType(); ok {
		if err := reaction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Reaction.type": %w`, err)}
		}
	}
	if _, ok := ru.mutation.ActorsID(); ru.mutation.ActorsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reaction.actors"`)
	}
	if _, ok := ru.mutation.StatusID(); ru.mutation.StatusCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reaction.status"`)
	}
	return nil
}

func (ru *ReactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reaction.Table,
			Columns: reaction.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeUint64,
					Column: reaction.FieldActorID,
				},
				{
					Type:   field.TypeUint64,
					Column: reaction.FieldStatusID,
				},
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reaction.FieldUpdatedAt,
		})
	}
	if value, ok := ru.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reaction.FieldCreatedBy,
		})
	}
	if value, ok := ru.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reaction.FieldCreatedBy,
		})
	}
	if ru.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: reaction.FieldCreatedBy,
		})
	}
	if value, ok := ru.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reaction.FieldUpdatedBy,
		})
	}
	if value, ok := ru.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reaction.FieldUpdatedBy,
		})
	}
	if ru.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: reaction.FieldUpdatedBy,
		})
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: reaction.FieldType,
		})
	}
	if value, ok := ru.mutation.Dat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: reaction.FieldDat,
		})
	}
	if value, ok := ru.mutation.AddedDat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: reaction.FieldDat,
		})
	}
	if ru.mutation.ActorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reaction.ActorsTable,
			Columns: []string{reaction.ActorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: actor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ActorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reaction.ActorsTable,
			Columns: []string{reaction.ActorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: actor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reaction.StatusTable,
			Columns: []string{reaction.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reaction.StatusTable,
			Columns: []string{reaction.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ReactionUpdateOne is the builder for updating a single Reaction entity.
type ReactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReactionMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *ReactionUpdateOne) SetUpdatedAt(t time.Time) *ReactionUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetCreatedBy sets the "created_by" field.
func (ruo *ReactionUpdateOne) SetCreatedBy(i int) *ReactionUpdateOne {
	ruo.mutation.ResetCreatedBy()
	ruo.mutation.SetCreatedBy(i)
	return ruo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ruo *ReactionUpdateOne) SetNillableCreatedBy(i *int) *ReactionUpdateOne {
	if i != nil {
		ruo.SetCreatedBy(*i)
	}
	return ruo
}

// AddCreatedBy adds i to the "created_by" field.
func (ruo *ReactionUpdateOne) AddCreatedBy(i int) *ReactionUpdateOne {
	ruo.mutation.AddCreatedBy(i)
	return ruo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (ruo *ReactionUpdateOne) ClearCreatedBy() *ReactionUpdateOne {
	ruo.mutation.ClearCreatedBy()
	return ruo
}

// SetUpdatedBy sets the "updated_by" field.
func (ruo *ReactionUpdateOne) SetUpdatedBy(i int) *ReactionUpdateOne {
	ruo.mutation.ResetUpdatedBy()
	ruo.mutation.SetUpdatedBy(i)
	return ruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ruo *ReactionUpdateOne) SetNillableUpdatedBy(i *int) *ReactionUpdateOne {
	if i != nil {
		ruo.SetUpdatedBy(*i)
	}
	return ruo
}

// AddUpdatedBy adds i to the "updated_by" field.
func (ruo *ReactionUpdateOne) AddUpdatedBy(i int) *ReactionUpdateOne {
	ruo.mutation.AddUpdatedBy(i)
	return ruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ruo *ReactionUpdateOne) ClearUpdatedBy() *ReactionUpdateOne {
	ruo.mutation.ClearUpdatedBy()
	return ruo
}

// SetActorID sets the "actor_id" field.
func (ruo *ReactionUpdateOne) SetActorID(u uint64) *ReactionUpdateOne {
	ruo.mutation.SetActorID(u)
	return ruo
}

// SetStatusID sets the "status_id" field.
func (ruo *ReactionUpdateOne) SetStatusID(u uint64) *ReactionUpdateOne {
	ruo.mutation.SetStatusID(u)
	return ruo
}

// SetType sets the "type" field.
func (ruo *ReactionUpdateOne) SetType(r reaction.Type) *ReactionUpdateOne {
	ruo.mutation.SetType(r)
	return ruo
}

// SetDat sets the "dat" field.
func (ruo *ReactionUpdateOne) SetDat(u uint64) *ReactionUpdateOne {
	ruo.mutation.ResetDat()
	ruo.mutation.SetDat(u)
	return ruo
}

// AddDat adds u to the "dat" field.
func (ruo *ReactionUpdateOne) AddDat(u int64) *ReactionUpdateOne {
	ruo.mutation.AddDat(u)
	return ruo
}

// SetActorsID sets the "actors" edge to the Actor entity by ID.
func (ruo *ReactionUpdateOne) SetActorsID(id uint64) *ReactionUpdateOne {
	ruo.mutation.SetActorsID(id)
	return ruo
}

// SetActors sets the "actors" edge to the Actor entity.
func (ruo *ReactionUpdateOne) SetActors(a *Actor) *ReactionUpdateOne {
	return ruo.SetActorsID(a.ID)
}

// SetStatus sets the "status" edge to the Status entity.
func (ruo *ReactionUpdateOne) SetStatus(s *Status) *ReactionUpdateOne {
	return ruo.SetStatusID(s.ID)
}

// Mutation returns the ReactionMutation object of the builder.
func (ruo *ReactionUpdateOne) Mutation() *ReactionMutation {
	return ruo.mutation
}

// ClearActors clears the "actors" edge to the Actor entity.
func (ruo *ReactionUpdateOne) ClearActors() *ReactionUpdateOne {
	ruo.mutation.ClearActors()
	return ruo
}

// ClearStatus clears the "status" edge to the Status entity.
func (ruo *ReactionUpdateOne) ClearStatus() *ReactionUpdateOne {
	ruo.mutation.ClearStatus()
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReactionUpdateOne) Select(field string, fields ...string) *ReactionUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Reaction entity.
func (ruo *ReactionUpdateOne) Save(ctx context.Context) (*Reaction, error) {
	var (
		err  error
		node *Reaction
	)
	if err := ruo.defaults(); err != nil {
		return nil, err
	}
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Reaction)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ReactionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReactionUpdateOne) SaveX(ctx context.Context) *Reaction {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReactionUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReactionUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *ReactionUpdateOne) defaults() error {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		if reaction.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized reaction.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := reaction.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ruo *ReactionUpdateOne) check() error {
	if v, ok := ruo.mutation.GetType(); ok {
		if err := reaction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Reaction.type": %w`, err)}
		}
	}
	if _, ok := ruo.mutation.ActorsID(); ruo.mutation.ActorsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reaction.actors"`)
	}
	if _, ok := ruo.mutation.StatusID(); ruo.mutation.StatusCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Reaction.status"`)
	}
	return nil
}

func (ruo *ReactionUpdateOne) sqlSave(ctx context.Context) (_node *Reaction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reaction.Table,
			Columns: reaction.Columns,
			CompositeID: []*sqlgraph.FieldSpec{
				{
					Type:   field.TypeUint64,
					Column: reaction.FieldActorID,
				},
				{
					Type:   field.TypeUint64,
					Column: reaction.FieldStatusID,
				},
			},
		},
	}
	if id, ok := ruo.mutation.ActorID(); !ok {
		return nil, &ValidationError{Name: "actor_id", err: errors.New(`ent: missing "Reaction.actor_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := ruo.mutation.StatusID(); !ok {
		return nil, &ValidationError{Name: "status_id", err: errors.New(`ent: missing "Reaction.status_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !reaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: reaction.FieldUpdatedAt,
		})
	}
	if value, ok := ruo.mutation.CreatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reaction.FieldCreatedBy,
		})
	}
	if value, ok := ruo.mutation.AddedCreatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reaction.FieldCreatedBy,
		})
	}
	if ruo.mutation.CreatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: reaction.FieldCreatedBy,
		})
	}
	if value, ok := ruo.mutation.UpdatedBy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reaction.FieldUpdatedBy,
		})
	}
	if value, ok := ruo.mutation.AddedUpdatedBy(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: reaction.FieldUpdatedBy,
		})
	}
	if ruo.mutation.UpdatedByCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: reaction.FieldUpdatedBy,
		})
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: reaction.FieldType,
		})
	}
	if value, ok := ruo.mutation.Dat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: reaction.FieldDat,
		})
	}
	if value, ok := ruo.mutation.AddedDat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: reaction.FieldDat,
		})
	}
	if ruo.mutation.ActorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reaction.ActorsTable,
			Columns: []string{reaction.ActorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: actor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ActorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reaction.ActorsTable,
			Columns: []string{reaction.ActorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: actor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.StatusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reaction.StatusTable,
			Columns: []string{reaction.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: status.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.StatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   reaction.StatusTable,
			Columns: []string{reaction.StatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Reaction{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
