// Code generated by ent, DO NOT EDIT.

package runtime

import (
	"time"

	"github.com/eriner/burr/internal/ent/schema"
	"github.com/eriner/burr/internal/ent/server"
	"github.com/eriner/burr/internal/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	serverMixin := schema.Server{}.Mixin()
	serverMixinHooks0 := serverMixin[0].Hooks()
	server.Hooks[0] = serverMixinHooks0[0]
	serverMixinFields0 := serverMixin[0].Fields()
	_ = serverMixinFields0
	serverFields := schema.Server{}.Fields()
	_ = serverFields
	// serverDescCreatedAt is the schema descriptor for created_at field.
	serverDescCreatedAt := serverMixinFields0[0].Descriptor()
	// server.DefaultCreatedAt holds the default value on creation for the created_at field.
	server.DefaultCreatedAt = serverDescCreatedAt.Default.(func() time.Time)
	// serverDescUpdatedAt is the schema descriptor for updated_at field.
	serverDescUpdatedAt := serverMixinFields0[1].Descriptor()
	// server.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	server.DefaultUpdatedAt = serverDescUpdatedAt.Default.(func() time.Time)
	// server.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	server.UpdateDefaultUpdatedAt = serverDescUpdatedAt.UpdateDefault.(func() time.Time)
	userMixin := schema.User{}.Mixin()
	userMixinHooks0 := userMixin[0].Hooks()
	user.Hooks[0] = userMixinHooks0[0]
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields0[0].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields0[1].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[0].Descriptor()
	// user.DefaultName holds the default value on creation for the name field.
	user.DefaultName = userDescName.Default.(string)
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = userDescName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPasswordHash is the schema descriptor for passwordHash field.
	userDescPasswordHash := userFields[2].Descriptor()
	// user.PasswordHashValidator is a validator for the "passwordHash" field. It is called by the builders before save.
	user.PasswordHashValidator = func() func([]byte) error {
		validators := userDescPasswordHash.Validators
		fns := [...]func([]byte) error{
			validators[0].(func([]byte) error),
			validators[1].(func([]byte) error),
			validators[2].(func([]byte) error),
		}
		return func(passwordHash []byte) error {
			for _, fn := range fns {
				if err := fn(passwordHash); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}

const (
	Version = "v0.11.2"                                         // Version of ent codegen.
	Sum     = "h1:UM2/BUhF2FfsxPHRxLjQbhqJNaDdVlOwNIAMLs2jyto=" // Sum of ent codegen.
)
