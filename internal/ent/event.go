// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/eriner/burr/internal/ent/actor"
	"github.com/eriner/burr/internal/ent/event"
)

// Event is the model entity for the Event schema.
type Event struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy int `json:"updated_by,omitempty"`
	// The event's 'friendly' name
	DisplayName string `json:"display_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EventQuery when eager-loading is set.
	Edges              EventEdges `json:"edges"`
	actor_organizer_of *uint64
}

// EventEdges holds the relations/edges for other nodes in the graph.
type EventEdges struct {
	// Accounts which have RSVP'd to the event
	Attendees []*Actor `json:"attendees,omitempty"`
	// Events belong to an Account who organizes the event
	Organizer *Actor `json:"organizer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AttendeesOrErr returns the Attendees value or an error if the edge
// was not loaded in eager-loading.
func (e EventEdges) AttendeesOrErr() ([]*Actor, error) {
	if e.loadedTypes[0] {
		return e.Attendees, nil
	}
	return nil, &NotLoadedError{edge: "attendees"}
}

// OrganizerOrErr returns the Organizer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EventEdges) OrganizerOrErr() (*Actor, error) {
	if e.loadedTypes[1] {
		if e.Organizer == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: actor.Label}
		}
		return e.Organizer, nil
	}
	return nil, &NotLoadedError{edge: "organizer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Event) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case event.FieldID, event.FieldCreatedBy, event.FieldUpdatedBy:
			values[i] = new(sql.NullInt64)
		case event.FieldDisplayName:
			values[i] = new(sql.NullString)
		case event.FieldCreatedAt, event.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case event.ForeignKeys[0]: // actor_organizer_of
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Event", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Event fields.
func (e *Event) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case event.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = uint64(value.Int64)
		case event.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case event.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		case event.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				e.CreatedBy = int(value.Int64)
			}
		case event.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				e.UpdatedBy = int(value.Int64)
			}
		case event.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				e.DisplayName = value.String
			}
		case event.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field actor_organizer_of", value)
			} else if value.Valid {
				e.actor_organizer_of = new(uint64)
				*e.actor_organizer_of = uint64(value.Int64)
			}
		}
	}
	return nil
}

// QueryAttendees queries the "attendees" edge of the Event entity.
func (e *Event) QueryAttendees() *ActorQuery {
	return (&EventClient{config: e.config}).QueryAttendees(e)
}

// QueryOrganizer queries the "organizer" edge of the Event entity.
func (e *Event) QueryOrganizer() *ActorQuery {
	return (&EventClient{config: e.config}).QueryOrganizer(e)
}

// Update returns a builder for updating this Event.
// Note that you need to call Event.Unwrap() before calling this method if this Event
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Event) Update() *EventUpdateOne {
	return (&EventClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Event entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Event) Unwrap() *Event {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Event is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Event) String() string {
	var builder strings.Builder
	builder.WriteString("Event(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", e.CreatedBy))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(fmt.Sprintf("%v", e.UpdatedBy))
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(e.DisplayName)
	builder.WriteByte(')')
	return builder.String()
}

// Events is a parsable slice of Event.
type Events []*Event

func (e Events) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
