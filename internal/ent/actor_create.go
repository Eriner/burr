// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/eriner/burr/internal/ent/actor"
	"github.com/eriner/burr/internal/ent/event"
	"github.com/eriner/burr/internal/ent/server"
	"github.com/eriner/burr/internal/ent/session"
	"github.com/eriner/burr/internal/ent/status"
)

// ActorCreate is the builder for creating a Actor entity.
type ActorCreate struct {
	config
	mutation *ActorMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (ac *ActorCreate) SetCreatedAt(t time.Time) *ActorCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *ActorCreate) SetNillableCreatedAt(t *time.Time) *ActorCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *ActorCreate) SetUpdatedAt(t time.Time) *ActorCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *ActorCreate) SetNillableUpdatedAt(t *time.Time) *ActorCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetCreatedBy sets the "created_by" field.
func (ac *ActorCreate) SetCreatedBy(i int) *ActorCreate {
	ac.mutation.SetCreatedBy(i)
	return ac
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (ac *ActorCreate) SetNillableCreatedBy(i *int) *ActorCreate {
	if i != nil {
		ac.SetCreatedBy(*i)
	}
	return ac
}

// SetUpdatedBy sets the "updated_by" field.
func (ac *ActorCreate) SetUpdatedBy(i int) *ActorCreate {
	ac.mutation.SetUpdatedBy(i)
	return ac
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ac *ActorCreate) SetNillableUpdatedBy(i *int) *ActorCreate {
	if i != nil {
		ac.SetUpdatedBy(*i)
	}
	return ac
}

// SetType sets the "type" field.
func (ac *ActorCreate) SetType(a actor.Type) *ActorCreate {
	ac.mutation.SetType(a)
	return ac
}

// SetName sets the "name" field.
func (ac *ActorCreate) SetName(s string) *ActorCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetDisplayName sets the "display_name" field.
func (ac *ActorCreate) SetDisplayName(s string) *ActorCreate {
	ac.mutation.SetDisplayName(s)
	return ac
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ac *ActorCreate) SetNillableDisplayName(s *string) *ActorCreate {
	if s != nil {
		ac.SetDisplayName(*s)
	}
	return ac
}

// SetNote sets the "note" field.
func (ac *ActorCreate) SetNote(s string) *ActorCreate {
	ac.mutation.SetNote(s)
	return ac
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (ac *ActorCreate) SetNillableNote(s *string) *ActorCreate {
	if s != nil {
		ac.SetNote(*s)
	}
	return ac
}

// SetLocked sets the "locked" field.
func (ac *ActorCreate) SetLocked(b bool) *ActorCreate {
	ac.mutation.SetLocked(b)
	return ac
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (ac *ActorCreate) SetNillableLocked(b *bool) *ActorCreate {
	if b != nil {
		ac.SetLocked(*b)
	}
	return ac
}

// SetMemorial sets the "memorial" field.
func (ac *ActorCreate) SetMemorial(b bool) *ActorCreate {
	ac.mutation.SetMemorial(b)
	return ac
}

// SetNillableMemorial sets the "memorial" field if the given value is not nil.
func (ac *ActorCreate) SetNillableMemorial(b *bool) *ActorCreate {
	if b != nil {
		ac.SetMemorial(*b)
	}
	return ac
}

// SetURL sets the "url" field.
func (ac *ActorCreate) SetURL(s string) *ActorCreate {
	ac.mutation.SetURL(s)
	return ac
}

// SetPubkey sets the "pubkey" field.
func (ac *ActorCreate) SetPubkey(b []byte) *ActorCreate {
	ac.mutation.SetPubkey(b)
	return ac
}

// SetPrivkey sets the "privkey" field.
func (ac *ActorCreate) SetPrivkey(b []byte) *ActorCreate {
	ac.mutation.SetPrivkey(b)
	return ac
}

// SetAvatarRemoteURL sets the "avatar_remote_url" field.
func (ac *ActorCreate) SetAvatarRemoteURL(s string) *ActorCreate {
	ac.mutation.SetAvatarRemoteURL(s)
	return ac
}

// SetNillableAvatarRemoteURL sets the "avatar_remote_url" field if the given value is not nil.
func (ac *ActorCreate) SetNillableAvatarRemoteURL(s *string) *ActorCreate {
	if s != nil {
		ac.SetAvatarRemoteURL(*s)
	}
	return ac
}

// SetAvatarLocalFile sets the "avatar_local_file" field.
func (ac *ActorCreate) SetAvatarLocalFile(s string) *ActorCreate {
	ac.mutation.SetAvatarLocalFile(s)
	return ac
}

// SetNillableAvatarLocalFile sets the "avatar_local_file" field if the given value is not nil.
func (ac *ActorCreate) SetNillableAvatarLocalFile(s *string) *ActorCreate {
	if s != nil {
		ac.SetAvatarLocalFile(*s)
	}
	return ac
}

// SetAvatarUpdatedAt sets the "avatar_updated_at" field.
func (ac *ActorCreate) SetAvatarUpdatedAt(t time.Time) *ActorCreate {
	ac.mutation.SetAvatarUpdatedAt(t)
	return ac
}

// SetNillableAvatarUpdatedAt sets the "avatar_updated_at" field if the given value is not nil.
func (ac *ActorCreate) SetNillableAvatarUpdatedAt(t *time.Time) *ActorCreate {
	if t != nil {
		ac.SetAvatarUpdatedAt(*t)
	}
	return ac
}

// SetHeaderURL sets the "header_url" field.
func (ac *ActorCreate) SetHeaderURL(s string) *ActorCreate {
	ac.mutation.SetHeaderURL(s)
	return ac
}

// SetNillableHeaderURL sets the "header_url" field if the given value is not nil.
func (ac *ActorCreate) SetNillableHeaderURL(s *string) *ActorCreate {
	if s != nil {
		ac.SetHeaderURL(*s)
	}
	return ac
}

// SetHeaderLocalFile sets the "header_local_file" field.
func (ac *ActorCreate) SetHeaderLocalFile(s string) *ActorCreate {
	ac.mutation.SetHeaderLocalFile(s)
	return ac
}

// SetNillableHeaderLocalFile sets the "header_local_file" field if the given value is not nil.
func (ac *ActorCreate) SetNillableHeaderLocalFile(s *string) *ActorCreate {
	if s != nil {
		ac.SetHeaderLocalFile(*s)
	}
	return ac
}

// SetHeaderUpdatedAt sets the "header_updated_at" field.
func (ac *ActorCreate) SetHeaderUpdatedAt(t time.Time) *ActorCreate {
	ac.mutation.SetHeaderUpdatedAt(t)
	return ac
}

// SetNillableHeaderUpdatedAt sets the "header_updated_at" field if the given value is not nil.
func (ac *ActorCreate) SetNillableHeaderUpdatedAt(t *time.Time) *ActorCreate {
	if t != nil {
		ac.SetHeaderUpdatedAt(*t)
	}
	return ac
}

// SetLastWebfingerAt sets the "last_webfinger_at" field.
func (ac *ActorCreate) SetLastWebfingerAt(t time.Time) *ActorCreate {
	ac.mutation.SetLastWebfingerAt(t)
	return ac
}

// SetNillableLastWebfingerAt sets the "last_webfinger_at" field if the given value is not nil.
func (ac *ActorCreate) SetNillableLastWebfingerAt(t *time.Time) *ActorCreate {
	if t != nil {
		ac.SetLastWebfingerAt(*t)
	}
	return ac
}

// SetInboxURL sets the "inbox_url" field.
func (ac *ActorCreate) SetInboxURL(s string) *ActorCreate {
	ac.mutation.SetInboxURL(s)
	return ac
}

// SetOutboxURL sets the "outbox_url" field.
func (ac *ActorCreate) SetOutboxURL(s string) *ActorCreate {
	ac.mutation.SetOutboxURL(s)
	return ac
}

// SetSharedInboxURL sets the "shared_inbox_url" field.
func (ac *ActorCreate) SetSharedInboxURL(s string) *ActorCreate {
	ac.mutation.SetSharedInboxURL(s)
	return ac
}

// SetFollowersURL sets the "followers_url" field.
func (ac *ActorCreate) SetFollowersURL(s string) *ActorCreate {
	ac.mutation.SetFollowersURL(s)
	return ac
}

// SetMovedToID sets the "moved_to_id" field.
func (ac *ActorCreate) SetMovedToID(u uint64) *ActorCreate {
	ac.mutation.SetMovedToID(u)
	return ac
}

// SetNillableMovedToID sets the "moved_to_id" field if the given value is not nil.
func (ac *ActorCreate) SetNillableMovedToID(u *uint64) *ActorCreate {
	if u != nil {
		ac.SetMovedToID(*u)
	}
	return ac
}

// SetFeaturedCollectionURL sets the "featured_collection_url" field.
func (ac *ActorCreate) SetFeaturedCollectionURL(s string) *ActorCreate {
	ac.mutation.SetFeaturedCollectionURL(s)
	return ac
}

// SetNillableFeaturedCollectionURL sets the "featured_collection_url" field if the given value is not nil.
func (ac *ActorCreate) SetNillableFeaturedCollectionURL(s *string) *ActorCreate {
	if s != nil {
		ac.SetFeaturedCollectionURL(*s)
	}
	return ac
}

// SetSilencedAt sets the "silenced_at" field.
func (ac *ActorCreate) SetSilencedAt(t time.Time) *ActorCreate {
	ac.mutation.SetSilencedAt(t)
	return ac
}

// SetNillableSilencedAt sets the "silenced_at" field if the given value is not nil.
func (ac *ActorCreate) SetNillableSilencedAt(t *time.Time) *ActorCreate {
	if t != nil {
		ac.SetSilencedAt(*t)
	}
	return ac
}

// SetSuspendedAt sets the "suspended_at" field.
func (ac *ActorCreate) SetSuspendedAt(t time.Time) *ActorCreate {
	ac.mutation.SetSuspendedAt(t)
	return ac
}

// SetNillableSuspendedAt sets the "suspended_at" field if the given value is not nil.
func (ac *ActorCreate) SetNillableSuspendedAt(t *time.Time) *ActorCreate {
	if t != nil {
		ac.SetSuspendedAt(*t)
	}
	return ac
}

// SetPasswordHash sets the "passwordHash" field.
func (ac *ActorCreate) SetPasswordHash(b []byte) *ActorCreate {
	ac.mutation.SetPasswordHash(b)
	return ac
}

// SetRecoveryCode sets the "recovery_code" field.
func (ac *ActorCreate) SetRecoveryCode(s string) *ActorCreate {
	ac.mutation.SetRecoveryCode(s)
	return ac
}

// SetNillableRecoveryCode sets the "recovery_code" field if the given value is not nil.
func (ac *ActorCreate) SetNillableRecoveryCode(s *string) *ActorCreate {
	if s != nil {
		ac.SetRecoveryCode(*s)
	}
	return ac
}

// SetRole sets the "role" field.
func (ac *ActorCreate) SetRole(u uint64) *ActorCreate {
	ac.mutation.SetRole(u)
	return ac
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (ac *ActorCreate) SetNillableRole(u *uint64) *ActorCreate {
	if u != nil {
		ac.SetRole(*u)
	}
	return ac
}

// SetBadge sets the "badge" field.
func (ac *ActorCreate) SetBadge(u uint64) *ActorCreate {
	ac.mutation.SetBadge(u)
	return ac
}

// SetNillableBadge sets the "badge" field if the given value is not nil.
func (ac *ActorCreate) SetNillableBadge(u *uint64) *ActorCreate {
	if u != nil {
		ac.SetBadge(*u)
	}
	return ac
}

// SetLocale sets the "locale" field.
func (ac *ActorCreate) SetLocale(a actor.Locale) *ActorCreate {
	ac.mutation.SetLocale(a)
	return ac
}

// SetID sets the "id" field.
func (ac *ActorCreate) SetID(u uint64) *ActorCreate {
	ac.mutation.SetID(u)
	return ac
}

// SetServerID sets the "server" edge to the Server entity by ID.
func (ac *ActorCreate) SetServerID(id uint64) *ActorCreate {
	ac.mutation.SetServerID(id)
	return ac
}

// SetServer sets the "server" edge to the Server entity.
func (ac *ActorCreate) SetServer(s *Server) *ActorCreate {
	return ac.SetServerID(s.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (ac *ActorCreate) AddEventIDs(ids ...uint64) *ActorCreate {
	ac.mutation.AddEventIDs(ids...)
	return ac
}

// AddEvents adds the "events" edges to the Event entity.
func (ac *ActorCreate) AddEvents(e ...*Event) *ActorCreate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ac.AddEventIDs(ids...)
}

// AddOrganizerOfIDs adds the "organizer_of" edge to the Event entity by IDs.
func (ac *ActorCreate) AddOrganizerOfIDs(ids ...uint64) *ActorCreate {
	ac.mutation.AddOrganizerOfIDs(ids...)
	return ac
}

// AddOrganizerOf adds the "organizer_of" edges to the Event entity.
func (ac *ActorCreate) AddOrganizerOf(e ...*Event) *ActorCreate {
	ids := make([]uint64, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ac.AddOrganizerOfIDs(ids...)
}

// AddStatusIDs adds the "statuses" edge to the Status entity by IDs.
func (ac *ActorCreate) AddStatusIDs(ids ...uint64) *ActorCreate {
	ac.mutation.AddStatusIDs(ids...)
	return ac
}

// AddStatuses adds the "statuses" edges to the Status entity.
func (ac *ActorCreate) AddStatuses(s ...*Status) *ActorCreate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ac.AddStatusIDs(ids...)
}

// AddFollowerIDs adds the "followers" edge to the Actor entity by IDs.
func (ac *ActorCreate) AddFollowerIDs(ids ...uint64) *ActorCreate {
	ac.mutation.AddFollowerIDs(ids...)
	return ac
}

// AddFollowers adds the "followers" edges to the Actor entity.
func (ac *ActorCreate) AddFollowers(a ...*Actor) *ActorCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddFollowerIDs(ids...)
}

// AddFollowingIDs adds the "following" edge to the Actor entity by IDs.
func (ac *ActorCreate) AddFollowingIDs(ids ...uint64) *ActorCreate {
	ac.mutation.AddFollowingIDs(ids...)
	return ac
}

// AddFollowing adds the "following" edges to the Actor entity.
func (ac *ActorCreate) AddFollowing(a ...*Actor) *ActorCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddFollowingIDs(ids...)
}

// AddReactedStatusIDs adds the "reacted_statuses" edge to the Status entity by IDs.
func (ac *ActorCreate) AddReactedStatusIDs(ids ...uint64) *ActorCreate {
	ac.mutation.AddReactedStatusIDs(ids...)
	return ac
}

// AddReactedStatuses adds the "reacted_statuses" edges to the Status entity.
func (ac *ActorCreate) AddReactedStatuses(s ...*Status) *ActorCreate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ac.AddReactedStatusIDs(ids...)
}

// AddModeratorIDs adds the "moderators" edge to the Actor entity by IDs.
func (ac *ActorCreate) AddModeratorIDs(ids ...uint64) *ActorCreate {
	ac.mutation.AddModeratorIDs(ids...)
	return ac
}

// AddModerators adds the "moderators" edges to the Actor entity.
func (ac *ActorCreate) AddModerators(a ...*Actor) *ActorCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddModeratorIDs(ids...)
}

// AddModeratingIDs adds the "moderating" edge to the Actor entity by IDs.
func (ac *ActorCreate) AddModeratingIDs(ids ...uint64) *ActorCreate {
	ac.mutation.AddModeratingIDs(ids...)
	return ac
}

// AddModerating adds the "moderating" edges to the Actor entity.
func (ac *ActorCreate) AddModerating(a ...*Actor) *ActorCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddModeratingIDs(ids...)
}

// AddMemberIDs adds the "members" edge to the Actor entity by IDs.
func (ac *ActorCreate) AddMemberIDs(ids ...uint64) *ActorCreate {
	ac.mutation.AddMemberIDs(ids...)
	return ac
}

// AddMembers adds the "members" edges to the Actor entity.
func (ac *ActorCreate) AddMembers(a ...*Actor) *ActorCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddMemberIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Actor entity by IDs.
func (ac *ActorCreate) AddGroupIDs(ids ...uint64) *ActorCreate {
	ac.mutation.AddGroupIDs(ids...)
	return ac
}

// AddGroups adds the "groups" edges to the Actor entity.
func (ac *ActorCreate) AddGroups(a ...*Actor) *ActorCreate {
	ids := make([]uint64, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddGroupIDs(ids...)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (ac *ActorCreate) AddSessionIDs(ids ...uint64) *ActorCreate {
	ac.mutation.AddSessionIDs(ids...)
	return ac
}

// AddSessions adds the "sessions" edges to the Session entity.
func (ac *ActorCreate) AddSessions(s ...*Session) *ActorCreate {
	ids := make([]uint64, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ac.AddSessionIDs(ids...)
}

// Mutation returns the ActorMutation object of the builder.
func (ac *ActorCreate) Mutation() *ActorMutation {
	return ac.mutation
}

// Save creates the Actor in the database.
func (ac *ActorCreate) Save(ctx context.Context) (*Actor, error) {
	var (
		err  error
		node *Actor
	)
	if err := ac.defaults(); err != nil {
		return nil, err
	}
	if len(ac.hooks) == 0 {
		if err = ac.check(); err != nil {
			return nil, err
		}
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ac.check(); err != nil {
				return nil, err
			}
			ac.mutation = mutation
			if node, err = ac.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			if ac.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ac.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ac.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Actor)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ActorMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ActorCreate) SaveX(ctx context.Context) *Actor {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *ActorCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *ActorCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *ActorCreate) defaults() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		if actor.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized actor.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := actor.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		if actor.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized actor.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := actor.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.DisplayName(); !ok {
		v := actor.DefaultDisplayName
		ac.mutation.SetDisplayName(v)
	}
	if _, ok := ac.mutation.Note(); !ok {
		v := actor.DefaultNote
		ac.mutation.SetNote(v)
	}
	if _, ok := ac.mutation.Locked(); !ok {
		v := actor.DefaultLocked
		ac.mutation.SetLocked(v)
	}
	if _, ok := ac.mutation.Memorial(); !ok {
		v := actor.DefaultMemorial
		ac.mutation.SetMemorial(v)
	}
	if _, ok := ac.mutation.Pubkey(); !ok {
		v := actor.DefaultPubkey
		ac.mutation.SetPubkey(v)
	}
	if _, ok := ac.mutation.LastWebfingerAt(); !ok {
		if actor.DefaultLastWebfingerAt == nil {
			return fmt.Errorf("ent: uninitialized actor.DefaultLastWebfingerAt (forgotten import ent/runtime?)")
		}
		v := actor.DefaultLastWebfingerAt()
		ac.mutation.SetLastWebfingerAt(v)
	}
	if _, ok := ac.mutation.Role(); !ok {
		v := actor.DefaultRole
		ac.mutation.SetRole(v)
	}
	if _, ok := ac.mutation.Badge(); !ok {
		v := actor.DefaultBadge
		ac.mutation.SetBadge(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (ac *ActorCreate) check() error {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Actor.created_at"`)}
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Actor.updated_at"`)}
	}
	if _, ok := ac.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Actor.type"`)}
	}
	if v, ok := ac.mutation.GetType(); ok {
		if err := actor.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Actor.type": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Actor.name"`)}
	}
	if v, ok := ac.mutation.Name(); ok {
		if err := actor.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Actor.name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.DisplayName(); !ok {
		return &ValidationError{Name: "display_name", err: errors.New(`ent: missing required field "Actor.display_name"`)}
	}
	if v, ok := ac.mutation.DisplayName(); ok {
		if err := actor.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "Actor.display_name": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Note(); !ok {
		return &ValidationError{Name: "note", err: errors.New(`ent: missing required field "Actor.note"`)}
	}
	if v, ok := ac.mutation.Note(); ok {
		if err := actor.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf(`ent: validator failed for field "Actor.note": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Locked(); !ok {
		return &ValidationError{Name: "locked", err: errors.New(`ent: missing required field "Actor.locked"`)}
	}
	if _, ok := ac.mutation.Memorial(); !ok {
		return &ValidationError{Name: "memorial", err: errors.New(`ent: missing required field "Actor.memorial"`)}
	}
	if _, ok := ac.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Actor.url"`)}
	}
	if v, ok := ac.mutation.URL(); ok {
		if err := actor.URLValidator(v); err != nil {
			return &ValidationError{Name: "url", err: fmt.Errorf(`ent: validator failed for field "Actor.url": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Pubkey(); !ok {
		return &ValidationError{Name: "pubkey", err: errors.New(`ent: missing required field "Actor.pubkey"`)}
	}
	if v, ok := ac.mutation.Pubkey(); ok {
		if err := actor.PubkeyValidator(v); err != nil {
			return &ValidationError{Name: "pubkey", err: fmt.Errorf(`ent: validator failed for field "Actor.pubkey": %w`, err)}
		}
	}
	if v, ok := ac.mutation.AvatarRemoteURL(); ok {
		if err := actor.AvatarRemoteURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_remote_url", err: fmt.Errorf(`ent: validator failed for field "Actor.avatar_remote_url": %w`, err)}
		}
	}
	if v, ok := ac.mutation.AvatarLocalFile(); ok {
		if err := actor.AvatarLocalFileValidator(v); err != nil {
			return &ValidationError{Name: "avatar_local_file", err: fmt.Errorf(`ent: validator failed for field "Actor.avatar_local_file": %w`, err)}
		}
	}
	if v, ok := ac.mutation.HeaderURL(); ok {
		if err := actor.HeaderURLValidator(v); err != nil {
			return &ValidationError{Name: "header_url", err: fmt.Errorf(`ent: validator failed for field "Actor.header_url": %w`, err)}
		}
	}
	if v, ok := ac.mutation.HeaderLocalFile(); ok {
		if err := actor.HeaderLocalFileValidator(v); err != nil {
			return &ValidationError{Name: "header_local_file", err: fmt.Errorf(`ent: validator failed for field "Actor.header_local_file": %w`, err)}
		}
	}
	if _, ok := ac.mutation.InboxURL(); !ok {
		return &ValidationError{Name: "inbox_url", err: errors.New(`ent: missing required field "Actor.inbox_url"`)}
	}
	if v, ok := ac.mutation.InboxURL(); ok {
		if err := actor.InboxURLValidator(v); err != nil {
			return &ValidationError{Name: "inbox_url", err: fmt.Errorf(`ent: validator failed for field "Actor.inbox_url": %w`, err)}
		}
	}
	if _, ok := ac.mutation.OutboxURL(); !ok {
		return &ValidationError{Name: "outbox_url", err: errors.New(`ent: missing required field "Actor.outbox_url"`)}
	}
	if v, ok := ac.mutation.OutboxURL(); ok {
		if err := actor.OutboxURLValidator(v); err != nil {
			return &ValidationError{Name: "outbox_url", err: fmt.Errorf(`ent: validator failed for field "Actor.outbox_url": %w`, err)}
		}
	}
	if _, ok := ac.mutation.SharedInboxURL(); !ok {
		return &ValidationError{Name: "shared_inbox_url", err: errors.New(`ent: missing required field "Actor.shared_inbox_url"`)}
	}
	if v, ok := ac.mutation.SharedInboxURL(); ok {
		if err := actor.SharedInboxURLValidator(v); err != nil {
			return &ValidationError{Name: "shared_inbox_url", err: fmt.Errorf(`ent: validator failed for field "Actor.shared_inbox_url": %w`, err)}
		}
	}
	if _, ok := ac.mutation.FollowersURL(); !ok {
		return &ValidationError{Name: "followers_url", err: errors.New(`ent: missing required field "Actor.followers_url"`)}
	}
	if v, ok := ac.mutation.FollowersURL(); ok {
		if err := actor.FollowersURLValidator(v); err != nil {
			return &ValidationError{Name: "followers_url", err: fmt.Errorf(`ent: validator failed for field "Actor.followers_url": %w`, err)}
		}
	}
	if v, ok := ac.mutation.PasswordHash(); ok {
		if err := actor.PasswordHashValidator(v); err != nil {
			return &ValidationError{Name: "passwordHash", err: fmt.Errorf(`ent: validator failed for field "Actor.passwordHash": %w`, err)}
		}
	}
	if _, ok := ac.mutation.Locale(); !ok {
		return &ValidationError{Name: "locale", err: errors.New(`ent: missing required field "Actor.locale"`)}
	}
	if v, ok := ac.mutation.Locale(); ok {
		if err := actor.LocaleValidator(v); err != nil {
			return &ValidationError{Name: "locale", err: fmt.Errorf(`ent: validator failed for field "Actor.locale": %w`, err)}
		}
	}
	if _, ok := ac.mutation.ServerID(); !ok {
		return &ValidationError{Name: "server", err: errors.New(`ent: missing required edge "Actor.server"`)}
	}
	return nil
}

func (ac *ActorCreate) sqlSave(ctx context.Context) (*Actor, error) {
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (ac *ActorCreate) createSpec() (*Actor, *sqlgraph.CreateSpec) {
	var (
		_node = &Actor{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: actor.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: actor.FieldID,
			},
		}
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: actor.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: actor.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.CreatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: actor.FieldCreatedBy,
		})
		_node.CreatedBy = value
	}
	if value, ok := ac.mutation.UpdatedBy(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: actor.FieldUpdatedBy,
		})
		_node.UpdatedBy = value
	}
	if value, ok := ac.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: actor.FieldType,
		})
		_node.Type = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actor.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ac.mutation.DisplayName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actor.FieldDisplayName,
		})
		_node.DisplayName = value
	}
	if value, ok := ac.mutation.Note(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actor.FieldNote,
		})
		_node.Note = value
	}
	if value, ok := ac.mutation.Locked(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: actor.FieldLocked,
		})
		_node.Locked = value
	}
	if value, ok := ac.mutation.Memorial(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: actor.FieldMemorial,
		})
		_node.Memorial = value
	}
	if value, ok := ac.mutation.URL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actor.FieldURL,
		})
		_node.URL = value
	}
	if value, ok := ac.mutation.Pubkey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: actor.FieldPubkey,
		})
		_node.Pubkey = value
	}
	if value, ok := ac.mutation.Privkey(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: actor.FieldPrivkey,
		})
		_node.Privkey = &value
	}
	if value, ok := ac.mutation.AvatarRemoteURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actor.FieldAvatarRemoteURL,
		})
		_node.AvatarRemoteURL = &value
	}
	if value, ok := ac.mutation.AvatarLocalFile(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actor.FieldAvatarLocalFile,
		})
		_node.AvatarLocalFile = &value
	}
	if value, ok := ac.mutation.AvatarUpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: actor.FieldAvatarUpdatedAt,
		})
		_node.AvatarUpdatedAt = &value
	}
	if value, ok := ac.mutation.HeaderURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actor.FieldHeaderURL,
		})
		_node.HeaderURL = &value
	}
	if value, ok := ac.mutation.HeaderLocalFile(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actor.FieldHeaderLocalFile,
		})
		_node.HeaderLocalFile = &value
	}
	if value, ok := ac.mutation.HeaderUpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: actor.FieldHeaderUpdatedAt,
		})
		_node.HeaderUpdatedAt = &value
	}
	if value, ok := ac.mutation.LastWebfingerAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: actor.FieldLastWebfingerAt,
		})
		_node.LastWebfingerAt = &value
	}
	if value, ok := ac.mutation.InboxURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actor.FieldInboxURL,
		})
		_node.InboxURL = value
	}
	if value, ok := ac.mutation.OutboxURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actor.FieldOutboxURL,
		})
		_node.OutboxURL = value
	}
	if value, ok := ac.mutation.SharedInboxURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actor.FieldSharedInboxURL,
		})
		_node.SharedInboxURL = value
	}
	if value, ok := ac.mutation.FollowersURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actor.FieldFollowersURL,
		})
		_node.FollowersURL = value
	}
	if value, ok := ac.mutation.MovedToID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: actor.FieldMovedToID,
		})
		_node.MovedToID = &value
	}
	if value, ok := ac.mutation.FeaturedCollectionURL(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actor.FieldFeaturedCollectionURL,
		})
		_node.FeaturedCollectionURL = &value
	}
	if value, ok := ac.mutation.SilencedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: actor.FieldSilencedAt,
		})
		_node.SilencedAt = &value
	}
	if value, ok := ac.mutation.SuspendedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: actor.FieldSuspendedAt,
		})
		_node.SuspendedAt = &value
	}
	if value, ok := ac.mutation.PasswordHash(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: actor.FieldPasswordHash,
		})
		_node.PasswordHash = &value
	}
	if value, ok := ac.mutation.RecoveryCode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: actor.FieldRecoveryCode,
		})
		_node.RecoveryCode = &value
	}
	if value, ok := ac.mutation.Role(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: actor.FieldRole,
		})
		_node.Role = value
	}
	if value, ok := ac.mutation.Badge(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: actor.FieldBadge,
		})
		_node.Badge = value
	}
	if value, ok := ac.mutation.Locale(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: actor.FieldLocale,
		})
		_node.Locale = value
	}
	if nodes := ac.mutation.ServerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   actor.ServerTable,
			Columns: []string{actor.ServerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: server.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.server_actors = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actor.EventsTable,
			Columns: actor.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.OrganizerOfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   actor.OrganizerOfTable,
			Columns: []string{actor.OrganizerOfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.StatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   actor.StatusesTable,
			Columns: []string{actor.StatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.FollowersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actor.FollowersTable,
			Columns: actor.FollowersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: actor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.FollowingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   actor.FollowingTable,
			Columns: actor.FollowingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: actor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ReactedStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   actor.ReactedStatusesTable,
			Columns: actor.ReactedStatusesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: status.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &ReactionCreate{config: ac.config, mutation: newReactionMutation(ac.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ModeratorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actor.ModeratorsTable,
			Columns: actor.ModeratorsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: actor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ModeratingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   actor.ModeratingTable,
			Columns: actor.ModeratingPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: actor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   actor.MembersTable,
			Columns: actor.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: actor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   actor.GroupsTable,
			Columns: actor.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: actor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   actor.SessionsTable,
			Columns: []string{actor.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: session.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ActorCreateBulk is the builder for creating many Actor entities in bulk.
type ActorCreateBulk struct {
	config
	builders []*ActorCreate
}

// Save creates the Actor entities in the database.
func (acb *ActorCreateBulk) Save(ctx context.Context) ([]*Actor, error) {
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Actor, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ActorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *ActorCreateBulk) SaveX(ctx context.Context) []*Actor {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *ActorCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *ActorCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
